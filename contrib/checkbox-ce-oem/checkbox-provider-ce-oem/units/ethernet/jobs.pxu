unit: template
template-resource: com.canonical.certification::device
template-filter: device.category == 'NETWORK' and device.interface != 'UNKNOWN'
template-engine: jinja2
template-unit: job
imports: 
    from com.canonical.certification import device
    from com.canonical.plainbox import manifest
requires: manifest.has_tcp_echo_stress_server == 'True'
id: ce-oem-ethernet/tcp-echo-stress-{{ interface }}
plugin: shell
user: root
category_id: com.canonical.plainbox::stress
_summary: Check if TCP echo via {{ interface }} without error.
_description:
    This job will use BASH to handle TCP socket via /dev/tcp.
    Need a server to run the following command before running the test.
    $ nc -lk -p {port_num}
environ: TCP_ECHO_SERVER_IP TCP_ECHO_SERVER_PORT TCP_ECHO_LOOP_ITERATIONS
estimated_duration: 10h
flags: also-after-suspend
command: tcpecho_stress.sh -s {{ interface }} -i "$TCP_ECHO_SERVER_IP" -p "$TCP_ECHO_SERVER_PORT" -l "$TCP_ECHO_LOOP_ITERATIONS" -o "${PLAINBOX_SESSION_SHARE}"/tcp_echo.log

id: ce-oem-ethernet/tcp-multi-connections
plugin: shell
user: root
category_id: com.canonical.plainbox::ethernet
_summary: Check if the system can handle multiple connections on TCP without error.
_description:
    This job will connect to server listened ports(200 ports in total),
    and send the payload(64KB) for few times of each port. This job will
    send the payload after all ports connection is established.
    Need a server(the same as DUT) to run the following command
    before running the test. 
    e.g. Run a server to listen on port range from 1024 to 1223.
    $ tcp_multi_connections.py server -p 1024 -e 1223
environ: TCP_MULTI_CONNECTIONS_SERVER_IP TCP_MULTI_CONNECTIONS_START_PORT TCP_MULTI_CONNECTIONS_END_PORT TCP_MULTI_CONNECTIONS_PAYLOAD_SIZE
estimated_duration: 600
flags: also-after-suspend
requires: manifest.has_tcp_multi_connection_server == 'True'
imports: from com.canonical.plainbox import manifest
command: 
    tcp_multi_connections.py client -H "$TCP_MULTI_CONNECTIONS_SERVER_IP" -p "$TCP_MULTI_CONNECTIONS_START_PORT" -e "$TCP_MULTI_CONNECTIONS_END_PORT" -P "$TCP_MULTI_CONNECTIONS_PAYLOAD_SIZE"
