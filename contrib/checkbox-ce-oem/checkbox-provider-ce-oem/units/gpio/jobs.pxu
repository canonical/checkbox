id: ce-oem-gpio/check-slots
category_id: com.canonical.certification::gpio
plugin: shell
user: root
estimated_duration: 5
environ: EXPECTED_GADGET_GPIO
imports:
  from com.canonical.certification import lsb
  from com.canonical.plainbox import manifest
requires:
  manifest.has_gpio_slot_been_defined == 'True'
  lsb.distributor_id == 'Ubuntu Core'
_summary: Check gadget snap defined GPIO slots.
_purpose: Check if expected GPIO slots been defined in gadget snap
_description:
    Use checkbox config EXPECTED_GADGET_GPIO to define the expected GPIO.
    Usage EXPECTED_GADGET_GPIO=499,500:502
    Sprate by comma, and also colon to define a range of ports
command: check_gpio.py check-gpio -c "$EXPECTED_GADGET_GPIO"

id: ce-oem-gpio-gadget-slots
_summary: Generates a GPIO list that defined in the gadget snap
_description:
    Generates a GPIO list that is defined in the gadget snap.
    This GPIO list will be used to check if the GPIO nodes have
    been exported after connecting the interfaces.
estimated_duration: 0.02
imports:
  from com.canonical.certification import lsb
requires:
  lsb.distributor_id == 'Ubuntu Core'
category_id: com.canonical.certification::gpio
plugin: resource
command: check_gpio.py dump

unit: template
template-resource: ce-oem-gpio-gadget-slots
template-unit: job
template-id: ce-oem-gpio/node-export-test
id: ce-oem-gpio/node-export-test-{slot}
_summary: To test node of GPIO {gpio_number} been exported
plugin: shell
user: root
imports:
  from com.canonical.certification import lsb
  from com.canonical.plainbox import manifest
requires:
  manifest.has_gpio_slot_been_defined == 'True'
  lsb.distributor_id == 'Ubuntu Core'
category_id: com.canonical.certification::gpio
estimated_duration: 5s
flags: also-after-suspend
command: check_gpio.py check-node -n {gpio_number} -s {slot}

id: gpio_loopback_pin_mapping
_summary: Generates a GPIO loopback pin mapping for GPIO loopback test
_description:
    A GPIO loopback pin mapping. By giving a pair of GPIO pin on machnie to generates test jobs.
    Usage of parameter:
        GPIO_LOOPBACK_PIN_MAPPING=output_gpio_chip_number:physical_output_port:gpio_output_pin:input_gpio_chip_number:physical_input_port:gpio_input_pin ...
    e.g. GPIO_LOOPBACK_PIN_MAPPING=0:J1:21:0:J3:134 1:3:68:2:4:69
estimated_duration: 0.02
category_id: com.canonical.certification::gpio
plugin: resource
environ: GPIO_LOOPBACK_PIN_MAPPING
command:
    awk '{
        split($0, record, " ")
        for (i in record) {
            split(record[i], data, ":")
            printf "OUTPUT_GPIO_CHIP_NUMBER: %s\nPHYSICAL_OUTPUT_PORT: %s\nGPIO_OUTPUT_PIN: %s\nINPUT_GPIO_CHIP_NUMBER: %s\nPHYSICAL_INPUT_PORT: %s\nGPIO_INPUT_PIN: %s\n", data[1], data[2], data[3], data[4], data[5], data[6]
        }
    }' <<< "$GPIO_LOOPBACK_PIN_MAPPING"

id: ce-oem-gpio/loopback-on-phycial-output-{{PHYSICAL_OUTPUT_PORT}}-input-{{PHYSICAL_INPUT_PORT}}
unit: template
template-resource: gpio_loopback_pin_mapping
template-unit: job
template-engine: jinja2
_summary: GPIO loopback test on physical port {{PHYSICAL_OUTPUT_PORT}} and {{PHYSICAL_INPUT_PORT}}
_description:
    GPIO loopback test between physical output port {{PHYSICAL_INPUT_PORT}}
    and physical input port {{PHYSICAL_INPUT_PORT}} on outpu GPIO Chip gpiochip{{OUTPUT_GPIO_CHIP_NUMBER}} and input GPIO Chip gpiochip{{INPUT_GPIO_CHIP_NUMBER}}
plugin: shell
user: root
category_id: com.canonical.certification::gpio
estimated_duration: 5s
flags: also-after-suspend
command:
    echo "## Perform the GPIO loopback test"
    gpio_loopback_test.py -oc {{OUTPUT_GPIO_CHIP_NUMBER}} -ic {{INPUT_GPIO_CHIP_NUMBER}} -po {{PHYSICAL_OUTPUT_PORT}} -go {{GPIO_OUTPUT_PIN}} -pi {{PHYSICAL_INPUT_PORT}} -gi {{GPIO_INPUT_PIN}}

