id: dss/initialize
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires:
  executable.name == 'dss'
_summary: Check that the DSS environment initializes
estimated_duration: 2m
command:
  set -eo pipefail
  KUBE_CONFIG="$(cat ~/.kube/config)"
  run_dss.sh initialize --kubeconfig "$KUBE_CONFIG"

id: dss/namespace
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/initialize
_summary: Check that the dss namespace is deployed
estimated_duration: 5s
command: kubectl get ns dss
_siblings: [
  { "id": "dss/namespace_after_reboot",
    "_summary": "Check that the dss namespace is still deployed after reboot",
    "depends": "dss/wait_after_reboot" }
  ]

id: dss/status_mlflow
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/namespace
_summary: Check that the DSS mlflow is deployed and ready
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "MLflow deployment: Ready"
_siblings: [
  { "id": "dss/status_mlflow_after_reboot",
    "_summary": "Check that the DSS mlflow is still deployed after reboot",
    "depends": "dss/namespace_after_reboot" }
  ]

id: dss/status_nvidia_gpu
category_id: dss-regress
flags: simple
imports:
  from com.canonical.certification import executable
  from com.canonical.certification import graphics_card
requires:
  executable.name == 'dss'
  graphics_card.vendor == 'NVIDIA Corporation'
depends: dss/status_mlflow
_summary: Check that DSS status reports NVIDIA GPU acceleration is enabled
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "NVIDIA GPU acceleration: Enabled.*"
_siblings: [
  { "id": "dss/status_nvidia_gpu_after_reboot",
    "_summary": "Check that DSS status still reports NVIDIA GPU is enabled after reboot",
    "depends": "dss/status_mlflow_after_reboot" }
  ]

id: dss/status_intel_gpu
category_id: dss-regress
flags: simple
imports:
  from com.canonical.certification import executable
  from com.canonical.certification import graphics_card
requires:
  executable.name == 'dss'
  graphics_card.vendor == 'Intel Corporation'
depends: dss/status_mlflow
_summary: Check that DSS status reports Intel GPU acceleration is enabled
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "Intel GPU acceleration: Enabled.*"
_siblings: [
  { "id": "dss/status_intel_gpu_after_reboot",
    "_summary": "Check that DSS status still reports Intel GPU is enabled after reboot",
    "depends": "dss/status_mlflow_after_reboot" }
  ]

id: dss/purge
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/initialize
_summary: Check that DSS can be purged
estimated_duration: 5m
command: timeout 5m run_dss.sh purge

id: dss/reboot
category_id: dss-regress
flags: simple
depends: dss/initialize
_summary: Reboot the machine
estimated_duration: 10s
command: echo "rebooting"

id: dss/wait_after_reboot
category_id: dss-regress
flags: simple
depends: dss/reboot
_summary: Wait for cluster to settle down after reboot
estimated_duration: 10s
command: echo "waiting"


# New-Notebook test jobs ######################################################

id: dss/notebook_tests_list
_summary: List of notebook tests for DSS
category_id: dss-regress
plugin: resource
command:
  echo 'framework: pytorch'
  echo 'accel: cpu'
  echo 'image: pytorch'
  echo 'check: has_pytorch_available'
  echo 'depends: dss/status_mlflow'
  echo
  echo 'framework: tensorflow'
  echo 'accel: cpu'
  echo 'image: tensorflow'
  echo 'check: has_tensorflow_available'
  echo 'depends: dss/status_mlflow'
  echo
  echo 'framework: pytorch'
  echo 'accel: intel'
  echo 'image: pytorch-intel'
  echo 'check: sees_intel_gpu_in_pytorch'
  echo 'depends: dss/status_intel_gpu'
  echo
  echo 'framework: tensorflow'
  echo 'accel: intel'
  echo 'image: tensorflow-intel'
  echo 'check: sees_intel_gpu_in_tensorflow'
  echo 'depends: dss/status_intel_gpu'
  echo
  echo 'framework: pytorch'
  echo 'accel: cuda'
  echo 'image: pytorch-cuda'
  echo 'check: sees_nvidia_gpu_in_pytorch'
  echo 'depends: dss/status_nvidia_gpu'
  echo
  echo 'framework: tensorflow'
  echo 'accel: cuda'
  echo 'image: tensorflow-cuda'
  echo 'check: sees_nvidia_gpu_in_tensorflow'
  echo 'depends: dss/status_nvidia_gpu'


unit: template
template-resource: dss/notebook_tests_list
plugin: shell
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
id: dss/create_new_notebook_using_{image}
depends: {depends}
_summary: Check that a new notebook can be created from '{image}'
estimated_duration: 15m
command: timeout 15m run_dss.sh create new-{framework}-{accel} --image {image}

unit: template
template-resource: dss/notebook_tests_list
plugin: shell
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
id: dss/verify_new_notebook_of_{image}
depends: dss/create_new_notebook_using_{image}
_summary: Check that the new notebook from '{image}' can use acceleration
estimated_duration: 1m
command: timeout 1m check_notebook.py new-{framework}-{accel} {check}

unit: template
template-resource: dss/notebook_tests_list
plugin: shell
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
id: dss/remove_new_notebook_of_{image}
depends: {depends}
after: dss/create_new_notebook_using_{image}
_summary: Check that the new notebook from '{image}' can be removed
estimated_duration: 1m
command: timeout 1m run_dss.sh remove new-{framework}-{accel}
