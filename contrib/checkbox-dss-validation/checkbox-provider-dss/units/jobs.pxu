id: dss/initialize
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires:
  executable.name == 'dss'
_summary: Check that the DSS environment initializes
estimated_duration: 2m
command:
  set -eo pipefail
  KUBE_CONFIG="$(cat ~/.kube/config)"
  run_dss.sh initialize --kubeconfig "$KUBE_CONFIG"

id: dss/namespace
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/initialize
_summary: Check that the dss namespace is deployed
estimated_duration: 5s
command: kubectl get ns dss
_siblings: [
  { "id": "dss/namespace_after_reboot",
    "_summary": "Check that the dss namespace is still deployed after reboot",
    "depends": "dss/wait_after_reboot" }
  ]

id: dss/status_mlflow
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/namespace
_summary: Check that the DSS mlflow is deployed and ready
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "MLflow deployment: Ready"
_siblings: [
  { "id": "dss/status_mlflow_after_reboot",
    "_summary": "Check that the DSS mlflow is still deployed after reboot",
    "depends": "dss/namespace_after_reboot" }
  ]

id: dss/status_nvidia_gpu
category_id: dss-regress
flags: simple
imports:
  from com.canonical.certification import executable
  from com.canonical.certification import graphics_card
requires:
  executable.name == 'dss'
  graphics_card.vendor == 'NVIDIA Corporation'
depends: dss/status_mlflow
_summary: Check that DSS status reports NVIDIA GPU acceleration is enabled
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "NVIDIA GPU acceleration: Enabled.*"
_siblings: [
  { "id": "dss/status_nvidia_gpu_after_reboot",
    "_summary": "Check that DSS status still reports NVIDIA GPU is enabled after reboot",
    "depends": "dss/status_mlflow_after_reboot" }
  ]

id: dss/status_intel_gpu
category_id: dss-regress
flags: simple
imports:
  from com.canonical.certification import executable
  from com.canonical.certification import graphics_card
requires:
  executable.name == 'dss'
  graphics_card.vendor == 'Intel Corporation'
depends: dss/status_mlflow
_summary: Check that DSS status reports Intel GPU acceleration is enabled
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "Intel GPU acceleration: Enabled.*"
_siblings: [
  { "id": "dss/status_intel_gpu_after_reboot",
    "_summary": "Check that DSS status still reports Intel GPU is enabled after reboot",
    "depends": "dss/status_mlflow_after_reboot" }
  ]

id: dss/purge
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/initialize
_summary: Check that DSS can be purged
estimated_duration: 5m
command: timeout 5m run_dss.sh purge

id: dss/reboot
category_id: dss-regress
flags: noreturn
plugin: shell
depends: dss/initialize
_summary: Reboot the machine
estimated_duration: 2m
command:
  set -ex
  echo "starting rebooting"
  sudo reboot
  echo "finished rebooting"

id: dss/wait_after_reboot
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/reboot
_summary: Wait for cluster to settle down after reboot
estimated_duration: 15m
command:
  set -ex
  sleep 120
  timeout 15m bash -c 'while ! kubectl get pods -A &> /dev/null; do
      echo "Waiting for Kubernetes cluster to get ready"
      sleep 5
    done'
  kubectl get pods -A
  echo "Waiting a bit more for the daemonsets to restart"
  sleep 120

id: dss/wait_for_intel_gpu_rollout
category_id: dss-regress
flags: simple
imports:
  from com.canonical.certification import executable
  from com.canonical.certification import graphics_card
requires:
  executable.name == 'kubectl'
  graphics_card.vendor == 'Intel Corporation'
_summary: Check that Intel GPU plugin has rolled out in the cluster
estimated_duration: 15m
command:
  set -ex
  timeout 15m kubectl -n node-feature-discovery rollout status ds/nfd-worker
  timeout 15m kubectl -n default rollout status ds/intel-gpu-plugin
_siblings: [
  { "id": "dss/wait_after_reboot_for_intel_gpu_rollout",
    "_summary": "Check that Intel GPU plugin has rolled out in the cluster after reboot",
    "after": "dss/wait_after_reboot" }
  ]

id: dss/wait_for_nvidia_gpu_rollout
category_id: dss-regress
flags: simple
imports:
  from com.canonical.certification import executable
  from com.canonical.certification import graphics_card
requires:
  executable.name == 'kubectl'
  graphics_card.vendor == 'NVIDIA Corporation'
_summary: Check that NVIDIA GPU plugin has rolled out in the cluster
estimated_duration: 15m
command:
  set -ex
  timeout 15m kubectl -n gpu-operator-resources rollout status ds/nvidia-device-plugin-daemonset
  timeout 15m kubectl -n gpu-operator-resources rollout status ds/nvidia-operator-validator
_siblings: [
  { "id": "dss/wait_after_reboot_for_nvidia_gpu_rollout",
    "_summary": "Check that NVIDIA GPU plugin has rolled out in the cluster after reboot",
    "after": "dss/wait_after_reboot" }
  ]


# New-Notebook test jobs ######################################################


unit: template
template-resource: dss/notebook_tests_list
template-engine: jinja2
plugin: shell
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
id: dss/create_new_notebook_using_{{ image }}
depends: {{ depends }}
_summary: Check that a new notebook can be created from '{{ image }}'
estimated_duration: 15m
command: timeout 15m run_dss.sh create new-{{ framework }}-{{ accel }} --image {{ image }}
_siblings: [
  { "id": "dss/create_new_notebook_after_reboot_using_{{ image }}",
    "_summary": "Check that a new notebook can be created from '{{ image }}' after reboot",
    "depends": "{{ depends }}_after_reboot",
    "command": "timeout 15m run_dss.sh create new-after-reboot-{{ framework }}-{{ accel }} --image {{ image }}" },
  { "id": "dss/create_long_living_notebook_before_reboot_using_{{ image }}",
    "_summary": "Check that a long living notebook can be created from '{{ image }}' before reboot",
    "depends": "{{ depends }}",
    "command": "timeout 15m run_dss.sh create long-living-{{ framework }}-{{ accel }} --image {{ image }}" }
  ]

unit: template
template-resource: dss/notebook_tests_list
template-engine: jinja2
plugin: shell
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
id: dss/verify_new_notebook_of_{{ image }}
depends: dss/create_new_notebook_using_{{ image }}
_summary: Check that the new notebook from '{{ image }}' can use acceleration
estimated_duration: 1m
command: timeout 1m check_notebook.py new-{{ framework }}-{{ accel }} {{ check }}
_siblings: [
  { "id": "dss/verify_new_notebook_after_reboot_of_{{ image }}",
    "_summary": "Check that the new notebook from '{{ image }}' can use accel. after reboot",
    "depends": "dss/create_new_notebook_after_reboot_using_{{ image }}",
    "command": "timeout 1m check_notebook.py new-after-reboot-{{ framework }}-{{ accel }} {{ check }}" },
  { "id": "dss/verify_long_living_notebook_before_reboot_of_{{ image }}",
    "_summary": "Check that the long living notebook from '{{ image }}' can use accel. before reboot",
    "depends": "dss/create_long_living_notebook_before_reboot_using_{{ image }}",
    "command": "timeout 1m check_notebook.py long-living-{{ framework }}-{{ accel }} {{ check }}" },
  { "id": "dss/verify_long_living_notebook_after_reboot_of_{{ image }}",
    "_summary": "Check that the long living notebook from '{{ image }}' can use accel. after reboot",
    "depends": "dss/restart_long_living_notebook_after_reboot_using_{{ image }}",
    "command": "timeout 1m check_notebook.py long-living-{{ framework }}-{{ accel }} {{ check }}" }
  ]

unit: template
template-resource: dss/notebook_tests_list
template-engine: jinja2
plugin: shell
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
id: dss/remove_new_notebook_of_{{ image }}
depends: {{ depends }}
after: dss/create_new_notebook_using_{{ image }}
_summary: Check that the new notebook from '{{ image }}' can be removed
estimated_duration: 1m
command: timeout 1m run_dss.sh remove new-{{ framework }}-{{ accel }}
_siblings: [
  { "id": "dss/remove_new_notebook_after_reboot_of_{{ image }}",
    "_summary": "Check that the new notebook from '{{ image }}' can be removed after reboot",
    "depends": "{{ depends }}_after_reboot",
    "after": "dss/create_new_notebook_after_reboot_using_{{ image }}",
    "command": "timeout 1m run_dss.sh remove new-after-reboot-{{ framework }}-{{ accel }}" },
  { "id": "dss/remove_long_living_notebook_after_reboot_of_{{ image }}",
    "_summary": "Check that the long living notebook from '{{ image }}' can be removed after reboot",
    "depends": "{{ depends }}_after_reboot",
    "after": "dss/create_long_living_notebook_before_reboot_using_{{ image }}",
    "command": "timeout 1m run_dss.sh remove long-living-{{ framework }}-{{ accel }}" }
  ]

unit: template
template-resource: dss/notebook_tests_list
template-engine: jinja2
plugin: shell
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
id: dss/restart_long_living_notebook_after_reboot_using_{{ image }}
depends:
  {{ depends }}_after_reboot
  dss/create_long_living_notebook_before_reboot_using_{{ image }}
_summary: Check that the long living notebook from '{{ image }}' can be restarted
estimated_duration: 5m
command:
  set -e
  timeout 10s run_dss.sh stop long-living-{{ framework }}-{{ accel }}
  sleep 10
  timeout 5m run_dss.sh start long-living-{{ framework }}-{{ accel }}
  sleep 10

id: dss/create_new_notebook_using_pytorch
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/status_mlflow
_summary: Check that a new notebook can be created from 'pytorch'
flags: simple
estimated_duration: 15m
command: timeout 15m run_dss.sh create new-pytorch-cpu --image pytorch
_siblings: [
    {
      "id": "dss/create_new_notebook_using_tensorflow",
      "depends": "dss/status_mlflow",
      "_summary": "Check that a new notebook can be created from 'tensorflow'",
      "estimated_duration": "15m",
      "command": "timeout 15m run_dss.sh create new-tensorflow-cpu --image tensorflow"
    },
    {
      "id": "dss/create_new_notebook_using_pytorch-intel",
      "depends": "dss/status_intel_gpu",
      "_summary": "Check that a new notebook can be created from 'pytorch-intel'",
      "estimated_duration": "15m",
      "command": "timeout 15m run_dss.sh create new-pytorch-intel --image pytorch-intel"
    },
    {
      "id": "dss/create_new_notebook_using_tensorflow-intel",
      "depends": "dss/status_intel_gpu",
      "_summary": "Check that a new notebook can be created from 'tensorflow-intel'",
      "estimated_duration": "15m",
      "command": "timeout 15m run_dss.sh create new-tensorflow-intel --image tensorflow-intel"
    },
    {
      "id": "dss/create_new_notebook_using_pytorch-cuda",
      "depends": "dss/status_nvidia_gpu",
      "_summary": "Check that a new notebook can be created from 'pytorch-cuda'",
      "estimated_duration": "15m",
      "command": "timeout 15m run_dss.sh create new-pytorch-cuda --image pytorch-cuda"
    },
    {
      "id": "dss/create_new_notebook_using_tensorflow-cuda",
      "depends": "dss/status_nvidia_gpu",
      "_summary": "Check that a new notebook can be created from 'tensorflow-cuda'",
      "estimated_duration": "15m",
      "command": "timeout 15m run_dss.sh create new-tensorflow-cuda --image tensorflow-cuda"
    }
  ]

id: dss/verify_new_notebook_of_pytorch
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/create_new_notebook_using_pytorch
_summary: Check that the new notebook from 'pytorch' can use acceleration
flags: simple
estimated_duration: 1m
command: timeout 1m check_notebook.py new-pytorch-cpu has_pytorch_available
_siblings: [
    {
      "id": "dss/verify_new_notebook_of_tensorflow",
      "depends": "dss/create_new_notebook_using_tensorflow",
      "_summary": "Check that the new notebook from 'tensorflow' can use acceleration",
      "estimated_duration": "1m",
      "command": "timeout 1m check_notebook.py new-tensorflow-cpu has_tensorflow_available"
    },
    {
      "id": "dss/verify_new_notebook_of_pytorch-intel",
      "depends": "dss/create_new_notebook_using_pytorch-intel",
      "_summary": "Check that the new notebook from 'pytorch-intel' can use acceleration",
      "estimated_duration": "1m",
      "command": "timeout 1m check_notebook.py new-pytorch-intel sees_intel_gpu_in_pytorch"
    },
    {
      "id": "dss/verify_new_notebook_of_tensorflow-intel",
      "depends": "dss/create_new_notebook_using_tensorflow-intel",
      "_summary": "Check that the new notebook from 'tensorflow-intel' can use acceleration",
      "estimated_duration": "1m",
      "command": "timeout 1m check_notebook.py new-tensorflow-intel sees_intel_gpu_in_tensorflow"
    },
    {
      "id": "dss/verify_new_notebook_of_pytorch-cuda",
      "depends": "dss/create_new_notebook_using_pytorch-cuda",
      "_summary": "Check that the new notebook from 'pytorch-cuda' can use acceleration",
      "estimated_duration": "1m",
      "command": "timeout 1m check_notebook.py new-pytorch-cuda sees_nvidia_gpu_in_pytorch"
    },
    {
      "id": "dss/verify_new_notebook_of_tensorflow-cuda",
      "depends": "dss/create_new_notebook_using_tensorflow-cuda",
      "_summary": "Check that the new notebook from 'tensorflow-cuda' can use acceleration",
      "estimated_duration": "1m",
      "command": "timeout 1m check_notebook.py new-tensorflow-cuda sees_nvidia_gpu_in_tensorflow"
    }
  ]

id: dss/remove_new_notebook_of_pytorch
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/create_new_notebook_using_pytorch
_summary: Check that the new notebook from 'pytorch' can be removed
flags: simple
estimated_duration: 1m
command: timeout 1m run_dss.sh remove new-pytorch-cpu
_siblings: [
    {
      "id": "dss/remove_new_notebook_of_tensorflow",
      "depends": "dss/create_new_notebook_using_tensorflow",
      "_summary": "Check that the new notebook from 'tensorflow' can be removed",
      "estimated_duration": "1m",
      "command": "timeout 1m run_dss.sh remove new-tensorflow-cpu"
    },
    {
      "id": "dss/remove_new_notebook_of_pytorch-intel",
      "depends": "dss/create_new_notebook_using_pytorch-intel",
      "_summary": "Check that the new notebook from 'pytorch-intel' can be removed",
      "estimated_duration": "1m",
      "command": "timeout 1m run_dss.sh remove new-pytorch-intel"
    },
    {
      "id": "dss/remove_new_notebook_of_tensorflow-intel",
      "depends": "dss/create_new_notebook_using_tensorflow-intel",
      "_summary": "Check that the new notebook from 'tensorflow-intel' can be removed",
      "estimated_duration": "1m",
      "command": "timeout 1m run_dss.sh remove new-tensorflow-intel"
    },
    {
      "id": "dss/remove_new_notebook_of_pytorch-cuda",
      "depends": "dss/create_new_notebook_using_pytorch-cuda",
      "_summary": "Check that the new notebook from 'pytorch-cuda' can be removed",
      "estimated_duration": "1m",
      "command": "timeout 1m run_dss.sh remove new-pytorch-cuda"
    },
    {
      "id": "dss/remove_new_notebook_of_tensorflow-cuda",
      "depends": "dss/create_new_notebook_using_tensorflow-cuda",
      "_summary": "Check that the new notebook from 'tensorflow-cuda' can be removed",
      "estimated_duration": "1m",
      "command": "timeout 1m run_dss.sh remove new-tensorflow-cuda"
    }
  ]
