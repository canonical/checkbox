id: dss/initialize
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires:
  executable.name == 'dss'
  executable.name == 'microk8s'
_summary: Check that the DSS environment initializes
estimated_duration: 2m
command:
  set -eo pipefail
  KUBECONFIG="$(cat ~/.kube/config)"
  run_dss.sh initialize --kubeconfig "$KUBECONFIG"

id: dss/namespace
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/initialize
_summary: Check that the dss namespace is deployed
estimated_duration: 5s
command: kubectl get ns dss

id: dss/status_mlflow
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/namespace
_summary: Check that the dss mlflow is deployed
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "MLflow deployment: Ready"

id: dss/create_pytorch_cpu_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/initialize
_summary: Check that an PyTorch CPU notebook can be successfully created
estimated_duration: 5m
command: timeout 5m run_dss.sh create pytorch-cpu --image=pytorch

id: cpu/pytorch_can_use_cpu
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/create_pytorch_cpu_notebook
_summary: Check that PyTorch can use CPU in notebook
estimated_duration: 1m
command: check_notebook.py pytorch-cpu has_pytorch_available

id: dss/remove_pytorch_cpu_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/create_pytorch_cpu_notebook
_summary: Check that the PyTorch CPU notebook can be removed
estimated_duration: 1m
command: run_dss.sh remove pytorch-cpu

id: dss/create_tensorflow_cpu_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/initialize
_summary: Check that an Tensorflow CPU notebook can be successfully created
estimated_duration: 5m
command: timeout 5m run_dss.sh create tensorflow-cpu --image=tensorflow

id: cpu/tensorflow_can_use_cpu
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/create_tensorflow_cpu_notebook
_summary: Check that Tensorflow can use CPU in notebook
estimated_duration: 1m
command: check_notebook.py tensorflow-cpu has_tensorflow_available

id: dss/remove_tensorflow_cpu_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/create_tensorflow_cpu_notebook
_summary: Check that the Tensorflow CPU notebook can be removed
estimated_duration: 1m
command: run_dss.sh remove tensorflow-cpu

# Intel XPU jobs ##############################################################

id: intel_gpu_plugin/install
category_id: dss-regress
flags: simple
imports:
  from com.canonical.certification import executable
  from com.canonical.certification import graphics_card
requires:
  graphics_card.vendor == 'Intel Corporation'
  executable.name == 'kubectl'
depends: dss/initialize
_summary: Install Intel K8s GPU Device Plugin
estimated_duration: 2m
command:
  set -eou pipefail
  enable_intel_gpu_plugin.sh "v0.30.0" "10"
  check_gpu_rollout.sh intel

id: intel_gpu_plugin/labels
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: intel_gpu_plugin/install
_summary: Check that at least one k8s node has label Intel GPU label attached
estimated_duration: 5s
command:
  set -eou pipefail
  result="$(kubectl get nodes -o jsonpath='{.items[*].metadata.labels.intel\.feature\.node\.kubernetes\.io/gpu}')"
  echo "$result" | grep "true"

id: dss/status_intel_gpu
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: intel_gpu_plugin/labels
_summary: Check that DSS status reports Intel GPU acceleration is enabled
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "Intel GPU acceleration: Enabled.*"

id: dss/create_tensorflow_intel_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/status_intel_gpu
_summary: Check that a Tensorflow Intel notebook can be successfully created
estimated_duration: 5m
command: timeout 5m run_dss.sh create tensorflow-intel --image=tensorflow-intel

id: xpu/tensorflow_can_use_xpu
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/create_tensorflow_intel_notebook
_summary: Check that Tensorflow can use XPU in the notebook
estimated_duration: 1m
command: check_notebook.py tensorflow-intel sees_intel_gpu_in_tensorflow

id: dss/remove_tensorflow_intel_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/create_tensorflow_intel_notebook
_summary: Check that the Tensorflow Intel notebook can be removed
estimated_duration: 1m
command: run_dss.sh remove tensorflow-intel

id: dss/create_pytorch_intel_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/status_intel_gpu
_summary: Check that a PyTorch Intel notebook can be successfully created
estimated_duration: 5m
command: timeout 5m run_dss.sh create pytorch-intel --image=pytorch-intel

id: xpu/pytorch_can_use_xpu
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/create_pytorch_intel_notebook
_summary: Check that Pytorch can use XPU in the notebook
estimated_duration: 1m
command: check_notebook.py pytorch-intel sees_intel_gpu_in_pytorch

id: dss/remove_pytorch_intel_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/create_pytorch_intel_notebook
_summary: Check that the PyTorch Intel notebook can be removed
estimated_duration: 1m
command: run_dss.sh remove pytorch-intel

# NVIDIA CUDA jobs ############################################################

id: microk8s_nvidia_gpu_addon/enable
category_id: dss-regress
flags: simple
imports:
  from com.canonical.certification import executable
  from com.canonical.certification import graphics_card
requires:
  graphics_card.vendor == 'NVIDIA Corporation'
  executable.name == 'microk8s'
  executable.name == 'kubectl'
depends: dss/initialize
_summary: Enable NVIDIA GPU addon in microk8s
estimated_duration: 10m
command:
  set -eou pipefail
  OPERATOR_VERSION="24.6.2"
  microk8s enable gpu --driver=operator --version="${OPERATOR_VERSION}"
  check_gpu_rollout.sh nvidia

id: nvidia_gpu_addon/validations_succeed
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: microk8s_nvidia_gpu_addon/enable
_summary: NVIDIA GPU validations should succeed
estimated_duration: 10s
command:
  set -eou pipefail
  APP="nvidia-operator-validator"
  logs="$(kubectl -n gpu-operator-resources logs -lapp="$APP" -c "$APP")"
  echo "$logs" | grep "all validations are successful"

id: dss/status_nvidia_gpu
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: nvidia_gpu_addon/validations_succeed
_summary: Check that dss status reports that NVIDIA GPU acceleration is enabled
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "NVIDIA GPU acceleration: Enabled.*"

id: dss/create_pytorch_cuda_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/status_nvidia_gpu
_summary: Check that an PyTorch CUDA notebook can be successfully created
estimated_duration: 5m
command: timeout 5m run_dss.sh create pytorch-cuda --image=pytorch-cuda

id: cuda/pytorch_can_use_cuda
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/create_pytorch_cuda_notebook
_summary: Check PyTorch can use CUDA
estimated_duration: 1m
command: check_notebook.py pytorch-cuda sees_nvidia_gpu_in_pytorch

id: dss/remove_pytorch_cuda_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/create_pytorch_cuda_notebook
_summary: Check that the PyTorch CUDA notebook can be removed
estimated_duration: 1m
command: run_dss.sh remove pytorch-cuda

id: dss/create_tensorflow_cuda_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/status_nvidia_gpu
_summary: Check that an Tensorflow CUDA notebook can be successfully created
estimated_duration: 5m
command: timeout 5m run_dss.sh create tensorflow-cuda --image=tensorflow-cuda

id: cuda/tensorflow_can_use_cuda
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/create_tensorflow_cuda_notebook
_summary: Check Tensorflow can use CUDA
estimated_duration: 1m
command: check_notebook.py tensorflow-cuda sees_nvidia_gpu_in_tensorflow

id: dss/remove_tensorflow_cuda_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/create_tensorflow_cuda_notebook
_summary: Check that the Tensorflow CUDA notebook can be removed
estimated_duration: 1m
command: run_dss.sh remove tensorflow-cuda

id: dss/purge
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/create_tensorflow_cuda_notebook
_summary: Check that DSS can be purged
estimated_duration: 5m
command: timeout 5m run_dss.sh purge
