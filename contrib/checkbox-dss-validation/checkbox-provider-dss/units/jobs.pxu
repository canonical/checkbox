id: dss/initialize
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires:
  executable.name == 'dss'
  executable.name == 'microk8s'
_summary: Check that the DSS environment initializes
estimated_duration: 2m
command: check_dss.sh dss_can_be_initialized

id: dss/namespace
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: dss/initialize
_summary: Check that the dss namespace is deployed
estimated_duration: 5s
command: check_dss.sh dss_namespace_is_deployed

id: dss/status_mlflow
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/namespace
_summary: Check that the dss mlflow is deployed
estimated_duration: 5s
command: check_dss.sh mlflow_status_is_ready

id: dss/mlflow_deployed
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: dss/namespace
_summary: Check that the first service name is mlflow
estimated_duration: 5s
command: check_dss.sh mlflow_is_deployed_as_first_service

id: intel_gpu_plugin/install
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: (host_has_intel_gpus.available == 'true' and executable.name == 'kubectl')
depends: dss/initialize
_summary: Install Intel K8s GPU Device Plugin
estimated_duration: 2m
command: check_intel.sh gpu_plugin_can_be_installed

id: intel_gpu_plugin/daemonset_name
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/install
_summary: Check DaemonSet Name
estimated_duration: 5s
command: check_intel.sh gpu_plugin_daemonset_is_deployed

id: intel_gpu_plugin/daemonset_number_available
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/install
_summary: Check number of available daemonsets
estimated_duration: 5s
command: check_intel.sh one_daemonset_is_available

id: intel_gpu_plugin/daemonset_number_ready
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/daemonset_number_available
_summary: Check number of ready daemonsets
estimated_duration: 5s
command: check_intel.sh one_daemonset_is_ready

id: intel_gpu_plugin/labels
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/daemonset_number_ready
_summary: Check intel.feature.node.kubernetes.io/gpu k8s node label
estimated_duration: 5s
command: check_intel.sh gpu_node_label_is_attached

id: intel_gpu_plugin/gpu_count
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/labels
_summary: Check number of Intel GPUs available on k8s node
estimated_duration: 5s
command: check_intel.sh at_least_one_gpu_is_available

id: intel_gpu_plugin/node_gpu_capacity
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/gpu_count
_summary: Check capacity slots for pods requesting GPU(s)
estimated_duration: 5s
command: check_intel.sh capacity_slots_for_gpus_match

id: intel_gpu_plugin/node_gpu_allocatable
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: intel_gpu_plugin/node_gpu_capacity
_summary: Check allocatable slots for pods requesting GPU(s)
estimated_duration: 5s
command: check_intel.sh allocatable_slots_for_gpus_match

id: dss/status_intel_gpu
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: intel_gpu_plugin/node_gpu_allocatable
_summary: Check that dss status reports that Intel GPU acceleration is enabled
estimated_duration: 5s
command: check_dss.sh intel_gpu_acceleration_is_enabled

id: dss/create_itex_2.15_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/status_intel_gpu
_summary: Check that an ITEX 2.15 notebook can be successfully created
estimated_duration: 3m
command: check_dss.sh can_create_itex_215_notebook

id: itex/itex_2.15_import
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: dss/create_itex_2.15_notebook
_summary: Check to see if ITEX 2.15 can be imported
estimated_duration: 1m
command: check_itex.sh can_be_imported

id: itex/itex_2.15_gpu_avail
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: itex/itex_2.15_import
_summary: Check ITEX 2.15 GPU Availability
estimated_duration: 1m
command: check_itex.sh tensorflow_can_use_xpu

id: dss/create_ipex_2.1.20_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/status_intel_gpu
_summary: Check that an IPEX 2.1.20 notebook can be successfully created
estimated_duration: 3m
command: check_dss.sh can_create_ipex_2120_notebook

id: ipex/ipex_2.1.20_import
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: dss/create_ipex_2.1.20_notebook
_summary: Check to see if IPEX 2.1.20 can be imported
estimated_duration: 1m
command: check_ipex.sh can_be_imported

id: ipex/ipex_2.1.20_gpu_avail
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: ipex/ipex_2.1.20_import
_summary: Check IPEX 2.1.20 GPU availability
estimated_duration: 1m
command: check_ipex.sh pytorch_can_use_xpu

id: nvidia_gpu_addon/enable
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: (host_has_nvidia_gpus.available == 'true' and executable.name == 'microk8s')
depends: dss/initialize
_summary: Enable NVIDIA GPU addon
estimated_duration: 5m
command: check_cuda.sh gpu_addon_can_be_enabled

id: nvidia_gpu_addon/validations_succeed
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: nvidia_gpu_addon/enable
_summary: NVIDIA GPU validations should succeed
estimated_duration: 10s
command: check_cuda.sh gpu_validations_succeed

id: dss/status_nvidia_gpu
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: nvidia_gpu_addon/validations_succeed
_summary: Check that dss status reports that NVIDIA GPU acceleration is enabled
estimated_duration: 5s
command: check_dss.sh nvidia_gpu_acceleration_is_enabled

id: dss/create_pytorch_cuda_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/status_nvidia_gpu
_summary: Check that an PyTorch CUDA notebook can be successfully created
estimated_duration: 3m
command: check_dss.sh can_create_pytorch_cuda_notebook

id: cuda/pytorch_can_use_cuda
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: dss/create_pytorch_cuda_notebook
_summary: Check PyTorch can use CUDA
estimated_duration: 1m
command: check_cuda.sh pytorch_can_use_cuda

id: dss/create_tensorflow_cuda_notebook
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/status_nvidia_gpu
_summary: Check that an Tensorflow CUDA notebook can be successfully created
estimated_duration: 3m
command: check_dss.sh can_create_tensorflow_cuda_notebook

id: cuda/tensorflow_can_use_cuda
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'microk8s'
depends: dss/create_tensorflow_cuda_notebook
_summary: Check PyTorch can use CUDA
estimated_duration: 1m
command: check_cuda.sh tensorflow_can_use_cuda
