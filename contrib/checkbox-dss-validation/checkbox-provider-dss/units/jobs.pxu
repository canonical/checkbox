id: dss/initialize
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires:
  executable.name == 'dss'
_summary: Check that the DSS environment initializes
estimated_duration: 2m
command:
  set -eo pipefail
  KUBE_CONFIG="$(cat ~/.kube/config)"
  run_dss.sh initialize --kubeconfig "$KUBE_CONFIG"

id: dss/namespace
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/initialize
_summary: Check that the dss namespace is deployed
estimated_duration: 5s
command: kubectl get ns dss

id: dss/status_mlflow
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/namespace
_summary: Check that the DSS mlflow is deployed and ready
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "MLflow deployment: Ready"

id: dss/status_nvidia_gpu
category_id: dss-regress
flags: simple
imports:
  from com.canonical.certification import executable
  from com.canonical.certification import graphics_card
requires:
  executable.name == 'dss'
  graphics_card.vendor == 'NVIDIA Corporation'
depends: dss/status_mlflow
_summary: Check that DSS status reports NVIDIA GPU acceleration is enabled
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "NVIDIA GPU acceleration: Enabled.*"

id: dss/status_intel_gpu
category_id: dss-regress
flags: simple
imports:
  from com.canonical.certification import executable
  from com.canonical.certification import graphics_card
requires:
  executable.name == 'dss'
  graphics_card.vendor == 'Intel Corporation'
depends: dss/status_mlflow
_summary: Check that DSS status reports Intel GPU acceleration is enabled
estimated_duration: 5s
command:
  set -eo pipefail
  run_dss.sh status | grep "Intel GPU acceleration: Enabled.*"

id: dss/purge
category_id: dss-regress
flags: simple
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/initialize
_summary: Check that DSS can be purged
estimated_duration: 5m
command: timeout 5m run_dss.sh purge

# New-Notebook test jobs ######################################################


id: dss/create_new_notebook_using_pytorch
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/status_mlflow
_summary: Check that a new notebook can be created from 'pytorch'
flags: simple
estimated_duration: 15m
command: timeout 15m run_dss.sh create new-pytorch-cpu --image pytorch
_siblings: [
    {
      "id": "dss/create_new_notebook_using_tensorflow",
      "depends": "dss/status_mlflow",
      "_summary": "Check that a new notebook can be created from 'tensorflow'",
      "estimated_duration": "15m",
      "command": "timeout 15m run_dss.sh create new-tensorflow-cpu --image tensorflow"
    },
    {
      "id": "dss/create_new_notebook_using_pytorch-intel",
      "depends": "dss/status_intel_gpu",
      "_summary": "Check that a new notebook can be created from 'pytorch-intel'",
      "estimated_duration": "15m",
      "command": "timeout 15m run_dss.sh create new-pytorch-intel --image pytorch-intel"
    },
    {
      "id": "dss/create_new_notebook_using_tensorflow-intel",
      "depends": "dss/status_intel_gpu",
      "_summary": "Check that a new notebook can be created from 'tensorflow-intel'",
      "estimated_duration": "15m",
      "command": "timeout 15m run_dss.sh create new-tensorflow-intel --image tensorflow-intel"
    },
    {
      "id": "dss/create_new_notebook_using_pytorch-cuda",
      "depends": "dss/status_nvidia_gpu",
      "_summary": "Check that a new notebook can be created from 'pytorch-cuda'",
      "estimated_duration": "15m",
      "command": "timeout 15m run_dss.sh create new-pytorch-cuda --image pytorch-cuda"
    },
    {
      "id": "dss/create_new_notebook_using_tensorflow-cuda",
      "depends": "dss/status_nvidia_gpu",
      "_summary": "Check that a new notebook can be created from 'tensorflow-cuda'",
      "estimated_duration": "15m",
      "command": "timeout 15m run_dss.sh create new-tensorflow-cuda --image tensorflow-cuda"
    }
  ]

id: dss/verify_new_notebook_of_pytorch
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'kubectl'
depends: dss/create_new_notebook_using_pytorch
_summary: Check that the new notebook from 'pytorch' can use acceleration
flags: simple
estimated_duration: 1m
command: timeout 1m check_notebook.py new-pytorch-cpu has_pytorch_available
_siblings: [
    {
      "id": "dss/verify_new_notebook_of_tensorflow",
      "depends": "dss/create_new_notebook_using_tensorflow",
      "_summary": "Check that the new notebook from 'tensorflow' can use acceleration",
      "estimated_duration": "1m",
      "command": "timeout 1m check_notebook.py new-tensorflow-cpu has_tensorflow_available"
    },
    {
      "id": "dss/verify_new_notebook_of_pytorch-intel",
      "depends": "dss/create_new_notebook_using_pytorch-intel",
      "_summary": "Check that the new notebook from 'pytorch-intel' can use acceleration",
      "estimated_duration": "1m",
      "command": "timeout 1m check_notebook.py new-pytorch-intel sees_intel_gpu_in_pytorch"
    },
    {
      "id": "dss/verify_new_notebook_of_tensorflow-intel",
      "depends": "dss/create_new_notebook_using_tensorflow-intel",
      "_summary": "Check that the new notebook from 'tensorflow-intel' can use acceleration",
      "estimated_duration": "1m",
      "command": "timeout 1m check_notebook.py new-tensorflow-intel sees_intel_gpu_in_tensorflow"
    },
    {
      "id": "dss/verify_new_notebook_of_pytorch-cuda",
      "depends": "dss/create_new_notebook_using_pytorch-cuda",
      "_summary": "Check that the new notebook from 'pytorch-cuda' can use acceleration",
      "estimated_duration": "1m",
      "command": "timeout 1m check_notebook.py new-pytorch-cuda sees_nvidia_gpu_in_pytorch"
    },
    {
      "id": "dss/verify_new_notebook_of_tensorflow-cuda",
      "depends": "dss/create_new_notebook_using_tensorflow-cuda",
      "_summary": "Check that the new notebook from 'tensorflow-cuda' can use acceleration",
      "estimated_duration": "1m",
      "command": "timeout 1m check_notebook.py new-tensorflow-cuda sees_nvidia_gpu_in_tensorflow"
    }
  ]

id: dss/remove_new_notebook_of_pytorch
category_id: dss-regress
imports: from com.canonical.certification import executable
requires: executable.name == 'dss'
depends: dss/create_new_notebook_using_pytorch
_summary: Check that the new notebook from 'pytorch' can be removed
flags: simple
estimated_duration: 1m
command: timeout 1m run_dss.sh remove new-pytorch-cpu
_siblings: [
    {
      "id": "dss/remove_new_notebook_of_tensorflow",
      "depends": "dss/create_new_notebook_using_tensorflow",
      "_summary": "Check that the new notebook from 'tensorflow' can be removed",
      "estimated_duration": "1m",
      "command": "timeout 1m run_dss.sh remove new-tensorflow-cpu"
    },
    {
      "id": "dss/remove_new_notebook_of_pytorch-intel",
      "depends": "dss/create_new_notebook_using_pytorch-intel",
      "_summary": "Check that the new notebook from 'pytorch-intel' can be removed",
      "estimated_duration": "1m",
      "command": "timeout 1m run_dss.sh remove new-pytorch-intel"
    },
    {
      "id": "dss/remove_new_notebook_of_tensorflow-intel",
      "depends": "dss/create_new_notebook_using_tensorflow-intel",
      "_summary": "Check that the new notebook from 'tensorflow-intel' can be removed",
      "estimated_duration": "1m",
      "command": "timeout 1m run_dss.sh remove new-tensorflow-intel"
    },
    {
      "id": "dss/remove_new_notebook_of_pytorch-cuda",
      "depends": "dss/create_new_notebook_using_pytorch-cuda",
      "_summary": "Check that the new notebook from 'pytorch-cuda' can be removed",
      "estimated_duration": "1m",
      "command": "timeout 1m run_dss.sh remove new-pytorch-cuda"
    },
    {
      "id": "dss/remove_new_notebook_of_tensorflow-cuda",
      "depends": "dss/create_new_notebook_using_tensorflow-cuda",
      "_summary": "Check that the new notebook from 'tensorflow-cuda' can be removed",
      "estimated_duration": "1m",
      "command": "timeout 1m run_dss.sh remove new-tensorflow-cuda"
    }
  ]
