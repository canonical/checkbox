job_queue: $ENV_QUEUE
output_timeout: 1800
provision_data:
  $ENV_PROVISION_DATA
test_data:
  attachments:
    - local: $ENV_CB_DSS_SNAP
    - local: $ENV_LAUNCHER
    - local: $ENV_SETUP_LAUNCHER
    - local: $ENV_DEFAULT_MANIFEST
  test_cmds: |

    set -x

    # Constants
    CHECKBOX_RUNTIME="checkbox22"
    RESOURCES_PATH="attachments/test"
    TOOLS_PATH=tools

    # Retrieve cert-tools
    curl -Ls -o install_tools.sh https://raw.githubusercontent.com/canonical/certification-lab-ci-tools/main/install_tools.sh
    source install_tools.sh $TOOLS_PATH --branch main

    wait_for_ssh --allow-degraded
    _run clean_machine --im-sure

    _run install_packages git
    wait_for_ssh --allow-degraded

    # Refresh snaps
    _run sudo snap refresh --no-wait
    wait_for_snap_changes

    # Install runtime and provider on device
    echo "Installing checkbox runtime on device (from snap)"
    _run sudo snap install $CHECKBOX_RUNTIME --no-wait
    wait_for_snap_changes

    echo "Installing checkbox-dss snap from attachment"
    _put $RESOURCES_PATH/$ENV_CB_DSS_SNAP :
    _run sudo snap install --dangerous --classic ./$ENV_CB_DSS_SNAP --no-wait
    wait_for_snap_changes

    echo "Available snaps on device"
    _run sudo snap list

    # Restart the checkbox service just in case
    _run sudo systemctl restart snap.checkbox-dss.remote-slave.service
    check_for_checkbox_service --debug || exit 1

    # Sync Checkbox version between agent and device
    CHECKBOX_VERSION=$(_run checkbox-dss.checkbox-cli --version)
    [ -z "$CHECKBOX_VERSION" ] && echo "Error: Unable to retrieve Checkbox version from device" && exit 1
    echo "Installing checkbox $CHECKBOX_VERSION on agent container from source"
    install_checkbox_agent_source $CHECKBOX_VERSION $TOOLS_PATH

    # retrieve manifest
    MANIFEST_FILE=manifest.conf
    fetch_manifest --manifest_file manifest.conf $CID $HEXR_DEVICE_SECURE_ID
    if [ $? -ne 0 ]; then
        echo "Using default manifest"
        MANIFEST_FILE=$RESOURCES_PATH/$ENV_DEFAULT_MANIFEST
    fi
    # create setup launcher
    stacker --output setup.conf $RESOURCES_PATH/$ENV_SETUP_LAUNCHER $MANIFEST_FILE

    # run the setup test plan
    # XXX:@motjuste: will be part of main test plan when setup_include is available
    PYTHONUNBUFFERED=1 checkbox-cli control $DEVICE_IP setup.conf
    EXITCODE=$?
    if [ $EXITCODE -ne 0 ]; then exit $EXITCODE
    fi

    # run the test plan
    PYTHONUNBUFFERED=1 checkbox-cli control $DEVICE_IP $RESOURCES_PATH/$ENV_LAUNCHER
    EXITCODE=$?

    # XXX:@motjuste: gather artifacts

    exit $EXITCODE
