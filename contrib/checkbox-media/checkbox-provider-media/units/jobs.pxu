unit: template
template-resource: mediasource
template-filter: mediasource.operation == 'decode'
template-engine: jinja2
template-unit: job
id: ffmpeg_{{ codec }}_{{ resolution }}_{{ operation }}_{{ container }}
category_id: ffmpeg
flags: simple
user: root
_summary: Check {{ codec }} hardware {{ operation }} in {{ resolution }} for ffmpeg
requires:
  executable.name == "ffmpeg"
environ:
  # necessary for local mode
  XDG_SESSION_TYPE
  XDG_RUNTIME_DIR
  NORMAL_USER
estimated_duration: 1m
command:
  wget -q {{ video_url }}
  local_filename=$(basename {{ video_url }})
  LD_LIBRARY_PATH=/lib/x86_64-linux-gnu/ LIBVA_TRACE=/tmp/libva.trace ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -hide_banner -loglevel info -i $local_filename -t 5 -pix_fmt yuv420p -f rawvideo -vsync 1 -y out.yuv
  ffmpeg_return_status=$?
  # check libva trace logs for HW acceleration
  hw_used=false
  if grep "profile = {{ libva_profile }},.*entrypoint = {{ libva_entrypoint }}" /tmp/libva.trace*
  then
      echo "---- [PASS] using HW {{ operation }}"
      hw_used=true
  else
      echo "---- [FAIL] not using HW {{ operation }}"
  fi
  # check ffmpeg for successful exit
  if [ $ffmpeg_return_status -ne 0 ];
  then
      echo "---- [FAIL] FFMPEG returned an error"
  else
      echo "---- [PASS] FFMPEG command completed successfully"
  fi
  # cleanup files
  rm $local_filename
  rm /tmp/libva.trace*
  rm out.yuv
  if [[ $hw_used -ne 0 ]] || [[ $ffmpeg_return_status -ne 0 ]];
  then
    exit 1
  fi

unit: template
template-resource: mediasource
template-filter: mediasource.operation == 'encode'
template-engine: jinja2
template-unit: job
id: ffmpeg_{{ codec }}_{{ resolution }}_{{ operation }}_{{ container }}
category_id: ffmpeg
flags: simple
user: root
_summary: Check {{ codec }} hardware {{ operation }} in {{ resolution }} for ffmpeg
requires:
  executable.name == "ffmpeg"
environ:
  # necessary for local mode
  XDG_SESSION_TYPE
  XDG_RUNTIME_DIR
  NORMAL_USER
estimated_duration: 1m
command:
  wget -q {{ video_url }}
  local_filename=$(basename {{ video_url }})
  echo "LD_LIBRARY_PATH=/lib/x86_64-linux-gnu/:/usr/lib/x86_64-linux-gnu/ LIBVA_TRACE=/tmp/libva.trace ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -t 5 -hide_banner -loglevel info -hwaccel_output_format vaapi -i $local_filename -rc_mode CQP -low_power 1 -c:v {{ ffmpeg_output_codec }} output.{{ output_container }}"
  LD_LIBRARY_PATH=/lib/x86_64-linux-gnu/:/usr/lib/x86_64-linux-gnu/ LIBVA_TRACE=/tmp/libva.trace ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -t 5 -hide_banner -loglevel info -hwaccel_output_format vaapi -i $local_filename -rc_mode CQP -low_power 1 -c:v {{ ffmpeg_output_codec }} output.{{ output_container }}
  ffmpeg_return_status=$?
  # check libva trace logs for HW acceleration
  hw_used=false
  if awk '/profile *= *{{ libva_profile }}/ { p=1; next } p && /entrypoint *= *{{ libva_entrypoint }}/ { print prev "\n" $0; p=0 } { prev=$0 }' /tmp/libva.trace*
  then
      echo "---- [PASS] using HW {{ operation }}"
      hw_used=true
  else
      echo "---- [FAIL] not using HW {{ operation }}"
  fi
  # check ffmpeg for successful exit
  if [ $ffmpeg_return_status -ne 0 ];
  then
      echo "---- [FAIL] FFMPEG returned an error"
  else
      echo "---- [PASS] FFMPEG command completed successfully"
  fi
  # cleanup files
  rm $local_filename
  rm /tmp/libva.trace*
  rm output.{{ output_container }}
  if [[ $hw_used -ne 0 ]] || [[ $ffmpeg_return_status -ne 0 ]];
  then
    exit 1
  fi
