plugin: shell
category_id: com.canonical.plainbox::camera
id: camera/detect
flags: also-after-suspend
estimated_duration: 1.2
imports: from com.canonical.plainbox import manifest
requires:
  manifest.has_camera == 'True'
command:
  camera_test.py detect
_summary: This Automated test attempts to detect a camera.
user: root

plugin: shell
category_id: com.canonical.plainbox::camera
id: camera/detect-rpi
estimated_duration: 1.0
imports: from com.canonical.plainbox import manifest
requires:
  manifest.has_rpi_camera == 'True'
command:
  udev_resource.py -f MMAL | grep "category: MMAL"
_summary: Detect presence of a MMAL camera.

unit: template
template-resource: device
template-filter: device.category == 'CAPTURE' and device.name != ''
template-unit: job
plugin: user-interact-verify
category_id: com.canonical.plainbox::camera
id: camera/display_{name}
template-id: camera/display_name
flags: also-after-suspend
_summary: Webcam video display test for {product_slug}
estimated_duration: 120.0
depends: camera/detect
command:
  camera_test.py video -d /dev/{name}
_purpose:
    This test will check that the {product_slug} camera works
_steps:
    1. Click on Test to display a video capture from the camera for ten seconds.
_verification:
    Did you see the video capture?

unit: template
template-resource: device
template-filter: device.category == 'CAPTURE' and device.name != ''
template-unit: job
plugin: user-interact-verify
category_id: com.canonical.plainbox::camera
id: camera/led_{name}
template-id: camera/led_name
_summary: Webcam LED test for {product_slug}
estimated_duration: 120.0
imports: from com.canonical.plainbox import manifest
requires:
 manifest.has_led_camera == 'True'
depends: camera/detect
command:
  camera_test.py led -d /dev/{name}
_purpose:
    This test will check that the {product_slug} camera LED works
_steps:
    1. Select Test to activate camera
    2. Camera LED should light for a few seconds
_verification:
    Did the camera LED light?
flags: also-after-suspend

unit: template
template-resource: device
template-filter: device.category == 'CAPTURE' and device.name != ''
template-unit: job
plugin: user-interact-verify
category_id: com.canonical.plainbox::camera
id: camera/still_{name}
template-id: camera/still_name
flags: also-after-suspend
_summary: Webcam still image capture test for {product_slug}
estimated_duration: 120.0
depends: camera/detect
command:
  camera_test.py image -d /dev/{name}
_purpose:
    This test will check that the {product_slug} works
_steps:
    1. Click on Test to display a still image from the camera for ten seconds.
_verification:
    Did you see the image?

unit: template
template-resource: device
template-filter: device.category == 'CAPTURE' and device.name != ''
template-unit: job
plugin: shell
category_id: com.canonical.plainbox::camera
id: camera/multiple-resolution-images_{name}
template-id: camera/multiple-resolution-images_name
flags: also-after-suspend
_summary: Webcam multiple resolution capture test for {product_slug}
estimated_duration: 1.2
depends: camera/detect
command:
  camera_test.py resolutions -d /dev/{name} -o "$PLAINBOX_SESSION_SHARE"
_purpose:
  Takes multiple pictures based on the resolutions supported by the camera and
  validates their size and that they are of a valid format.

unit: template
template-resource: device
template-filter: device.category == 'CAPTURE' and device.name != ''
template-unit: job
plugin: attachment
category_id: com.canonical.plainbox::camera
id: camera/multiple-resolution-images-attachment_{name}
flags: also-after-suspend
_summary: Attach an image from the multiple resolution images test for {product_slug}
estimated_duration: 1s
after: camera/multiple-resolution-images_{name}
command:
  [ -f "$PLAINBOX_SESSION_SHARE"/resolution_test_image_{name}.jpg ] &&
  cat "$PLAINBOX_SESSION_SHARE"/resolution_test_image_{name}.jpg
_description:
  This test will attach one of the images used for the multiple resolution
  images test.

unit: template
template-resource: device
template-filter: device.category == 'CAPTURE' and device.name != ''
template-unit: job
plugin: shell
category_id: com.canonical.plainbox::camera
id: camera/camera-quality_{name}
template-id: camera/camera-quality_name
flags: also-after-suspend
_summary: Webcam BRISQUE score for {product_slug}
estimated_duration: 20s
depends: camera/detect
requires: lsb.release >= '22.04'
command:
  camera_quality_test.py -d {name} -o "$PLAINBOX_SESSION_SHARE"
_purpose:
  Takes a picture and computes the quality based on a No-Reference image
  quality assessment algorithm called BRISQUE. This test will timeout and fail
  if the quality has not been computed within 120 seconds.

unit: template
template-resource: device
template-filter: device.category == 'CAPTURE' and device.name != ''
template-unit: job
plugin: attachment
category_id: com.canonical.plainbox::camera
id: camera/camera-quality-image_{name}
flags: also-after-suspend
_summary: Attach the image used for the BRISQUE score for {product_slug}
estimated_duration: 1s
after: camera/camera-quality_{name}
requires: lsb.release >= '22.04'
command:
  [ -f "$PLAINBOX_SESSION_SHARE"/quality_image_{name}.jpg ] &&
  cat "$PLAINBOX_SESSION_SHARE"/quality_image_{name}.jpg
_description:
  This test will attach the image used for the BRISQUE score.

unit: template
template-resource: device
template-filter: device.category == 'MMAL' and device.name != ''
template-unit: job
plugin: shell
category_id: com.canonical.plainbox::camera
id: camera/multiple-resolution-images-rpi_{name}
template-id: camera/multiple-resolution-images-rpi_name
_summary: Webcam multiple resolution capture test for Pi Camera
estimated_duration: 16.0
depends: camera/detect-rpi
requires: cpuinfo.platform == 'armv7l'
command:
  camera_test_rpi.py --device /dev/{name}
_purpose:
  Takes multiple pictures based on the resolutions supported by the camera and
  validates their size and that they are of a valid format.
user: root

unit: template
template-resource: device
template-filter: device.category == 'MMAL' and device.name != ''
template-unit: job
plugin: attachment
category_id: com.canonical.plainbox::camera
id: camera/multiple-resolution-images-rpi-attachment_{name}
template-id: camera/multiple-resolution-images-rpi-attachment_name
_summary: Attach an image from the multiple resolution images test on rpi
estimated_duration: 1s
after: camera/multiple-resolution-images-rpi_{name}
requires: cpuinfo.platform == 'armv7l'
command:
  [ -f "$PLAINBOX_SESSION_SHARE"/picam_6.jpg ] &&
  cat "$PLAINBOX_SESSION_SHARE"/picam_6.jpg
_description:
  This test will attach one of the images used for the multiple resolution
  images test.

unit: template
template-engine: jinja2
template-resource: device
template-filter: device.category in ('CAPTURE', 'MMAL') and device.name != ''
template-unit: job
plugin: shell
category_id: com.canonical.plainbox::camera
id: camera/roundtrip-qrcode_{{ name }}
template-id: camera/roundtrip-qrcode_name
_summary: Test video output and camera {{ name }} by displaying and reading a QR code
estimated_duration: 5.0
depends:
  {%- if category == 'MMAL' %}
  camera/detect-rpi
  {%- else %}
  camera/detect
  {% endif -%}
requires:
  {%- if __on_ubuntucore__ %}
  lsb.release >= '19.1'
  {%- else %}
  lsb.release >= '19.1'
  package.name == 'python3-zbar'
  package.name == 'python3-pyqrcode'
  package.name == 'python3-pil'
  {% endif -%}
command:
  roundtrip_qr.py {{ name }}
_purpose:
  Generates a QR code representing a random string of ASCII letters. This is
  written to tty1 using ASCII escape codes. Either the PiCamera python module or
  a GStreamer pipeline is used to capture an image of the display. An attempt
  to decode a QR code in the image is then made and data compared against the
  random string.
user: root
