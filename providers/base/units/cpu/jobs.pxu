plugin: shell
category_id: com.canonical.plainbox::cpu
id: cpu/scaling_test
estimated_duration: 150.0
requires:
 executable.name == 'fwts'
 'userspace' in cpuinfo.governors
 cpuinfo.platform not in ("ppc64el", "s390x")
user: root
environ: PLAINBOX_SESSION_SHARE LD_LIBRARY_PATH SNAP
command:
 if [[ -v SNAP ]]; then
     export LD_LIBRARY_PATH=$SNAP/usr/lib/fwts:$LD_LIBRARY_PATH
 fi
 checkbox-support-fwts_test -t cpufreq -l "${PLAINBOX_SESSION_SHARE}"/scaling_test.log
_summary:
 Test the CPU scaling capabilities
_description:
 Use Firmware Test Suite (fwts cpufreq) to test the scaling capabilities of the
 CPU.

plugin: shell
category_id: com.canonical.plainbox::cpu
id: after-suspend-cpu/scaling_test
depends: com.canonical.certification::suspend/suspend_advanced_auto
estimated_duration: 150.0
requires:
 executable.name == 'fwts'
 'userspace' in cpuinfo.governors
 cpuinfo.platform not in ("ppc64el", "s390x")
user: root
environ: PLAINBOX_SESSION_SHARE LD_LIBRARY_PATH SNAP
command:
 if [[ -v SNAP ]]; then
     export LD_LIBRARY_PATH=$SNAP/usr/lib/fwts:$LD_LIBRARY_PATH
 fi
 checkbox-support-fwts_test -t cpufreq -l "${PLAINBOX_SESSION_SHARE}"/scaling_test_after_suspend.log
_summary:
 Test the CPU scaling capabilities
_description:
 Use Firmware Test Suite (fwts cpufreq) to test the scaling capabilities of the
 CPU.

plugin: attachment
category_id: com.canonical.plainbox::cpu
id: cpu/scaling_test-log-attach
estimated_duration: 1.0
depends: cpu/scaling_test
command: [[ -e "${PLAINBOX_SESSION_SHARE}"/scaling_test.log ]] && cat "${PLAINBOX_SESSION_SHARE}"/scaling_test.log
_summary:
 Attach CPU scaling capabilities log
_description:
 Attaches the log generated by cpu/scaling_test to the results submission.

plugin: attachment
category_id: com.canonical.plainbox::cpu
id: after-suspend-cpu/scaling_test-log-attach
estimated_duration: 1.0
depends: after-suspend-cpu/scaling_test
command: [[ -e "${PLAINBOX_SESSION_SHARE}"/scaling_test_after_suspend.log ]] && cat "${PLAINBOX_SESSION_SHARE}"/scaling_test_after_suspend.log
_summary:
 Attach CPU scaling capabilities log
_description:
 Attaches the log generated by cpu/scaling_test to the results submission.

plugin: shell
category_id: com.canonical.plainbox::cpu
id: cpu/maxfreq_test
estimated_duration: 0.6
requires: executable.name == 'fwts'
 cpuinfo.platform in ("i386", "x86_64")
user: root
environ: LD_LIBRARY_PATH SNAP
command:
 if [[ -v SNAP ]]; then
     export LD_LIBRARY_PATH=$SNAP/usr/lib/fwts:$LD_LIBRARY_PATH
 fi
 checkbox-support-fwts_test -t maxfreq -l "$PLAINBOX_SESSION_SHARE"/maxfreq_test.log
_summary:
 Test that the CPU can run at its max frequency
_description:
 Use the Firmware Test Suite (fwts cpufreq) to ensure that the CPU can run at
 its maximum frequency.

plugin: shell
category_id: com.canonical.plainbox::cpu
id: after-suspend-cpu/maxfreq_test
estimated_duration: 0.6
requires: executable.name == 'fwts'
 cpuinfo.platform in ("i386", "x86_64")
user: root
environ: LD_LIBRARY_PATH SNAP
command:
 if [[ -v SNAP ]]; then
     export LD_LIBRARY_PATH=$SNAP/usr/lib/fwts:$LD_LIBRARY_PATH
 fi
 checkbox-support-fwts_test -t maxfreq -l "$PLAINBOX_SESSION_SHARE"/maxfreq_test_after_suspend.log
_summary:
 Test that the CPU can run at its max frequency
_description:
 Use the Firmware Test Suite (fwts cpufreq) to ensure that the CPU can run at
 its maximum frequency.

plugin: attachment
category_id: com.canonical.plainbox::cpu
id: cpu/maxfreq_test-log-attach
estimated_duration: 1.0
depends: cpu/maxfreq_test
command: [ -e "$PLAINBOX_SESSION_SHARE"/maxfreq_test.log ] && cat "$PLAINBOX_SESSION_SHARE"/maxfreq_test.log
_summary:
 Attach CPU max frequency log
_description:
 Attaches the log generated by cpu/maxfreq_test to the results submission.

plugin: attachment
category_id: com.canonical.plainbox::cpu
id: after-suspend-cpu/maxfreq_test-log-attach
estimated_duration: 1.0
depends: after-suspend-cpu/maxfreq_test
command: [ -e "$PLAINBOX_SESSION_SHARE"/maxfreq_test.log ] && cat "$PLAINBOX_SESSION_SHARE"/maxfreq_test.log
_summary:
 Attach CPU max frequency log
_description:
 Attaches the log generated by cpu/maxfreq_test to the results submission.

plugin: shell
category_id: com.canonical.plainbox::cpu
id: cpu/clocktest
flags: also-after-suspend
estimated_duration: 300.0
command: clocktest
_summary:
 Tests the CPU for clock jitter
_description:
 Runs a test for clock jitter on SMP machines.

plugin: shell
category_id: com.canonical.plainbox::cpu
id: cpu/offlining_test
requires:
  cpu_offlining.state == 'supported'
flags: also-after-suspend
estimated_duration: 128.0
user: root
command: cpu_offlining.py
_summary:
 Test offlining of each CPU core
_description:
 Attempts to offline each core in a multicore system.

plugin: shell
category_id: com.canonical.plainbox::cpu
id: cpu/topology
flags: also-after-suspend
estimated_duration: 1.0
requires: int(cpuinfo.count) > 1 and (cpuinfo.platform == 'i386' or cpuinfo.platform == 'x86_64')
command: cpu_topology.py
_summary:
 Check CPU topology for accuracy between proc and sysfs
_description:
 Parses information about CPU topology provided by proc and sysfs and checks
 that they are consistent.

plugin: shell
category_id: com.canonical.plainbox::cpu
id: cpu/frequency_governors
estimated_duration: 22.0
user: root
command: nice -n -20 frequency_governors_test.py --debug
_description:
 This test checks that CPU frequency governors are obeyed when set.

unit: template
template-resource: cpuinfo
template-filter: cpuinfo.platform == 'armv7l'
template-unit: job
plugin: shell
category_id: com.canonical.plainbox::cpu
id: cpu/armhf_vfp_support_{platform}
estimated_duration: 1.0
user: root
command:
  echo "{other}" | grep "vfp\|vfpv3\|vfpv4\|vfpd32"
_summary:
 Validate that the Vector Floating Point Unit is running on {platform} device
_description:
 Validate that the Vector Floating Point Unit is running on {platform} device.

unit: template
template-resource: cpuinfo
template-filter: cpuinfo.platform == 'aarch64'
template-unit: job
plugin: shell
category_id: com.canonical.plainbox::cpu
id: cpu/arm64_vfp_support_{platform}
estimated_duration: 1.0
user: root
command:
  echo "{other}" | grep "fp"
_summary:
 Validate that the Floating Point Unit is running on {platform} device
_description:
 Validate that the Floating Point Unit is running on {platform} device.

plugin:shell
id: cpu/cstates
estimated_duration: 10.0
requires:
 executable.name == 'fwts'
 cpuinfo.platform not in ("aarch64", "armv7l", "s390x")
user: root
category_id: com.canonical.plainbox::cpu
_summary:
 Run C-States tests
_description:
 Uses the Firmware Test Suite (fwts) to test the power saving states of the CPU.
environ: PLAINBOX_SESSION_SHARE LD_LIBRARY_PATH SNAP
command:
 if [[ -v SNAP ]]; then
     export LD_LIBRARY_PATH=$SNAP/usr/lib/fwts:$LD_LIBRARY_PATH
 fi
 checkbox-support-fwts_test -l "$PLAINBOX_SESSION_SHARE"/fwts_cstates_results.log -t cstates

plugin:shell
id: after-suspend-cpu/cstates
depends: com.canonical.certification::suspend/suspend_advanced_auto
estimated_duration: 10.0
category_id: com.canonical.plainbox::cpu
requires:
 executable.name == 'fwts'
 cpuinfo.platform not in ("aarch64", "armv7l", "s390x")
user: root
_summary:
 Run C-States tests
_description:
 Uses the Firmware Test Suite (fwts) to test the power saving states of the CPU.
environ: PLAINBOX_SESSION_SHARE LD_LIBRARY_PATH SNAP
command:
 if [[ -v SNAP ]]; then
     export LD_LIBRARY_PATH=$SNAP/usr/lib/fwts:$LD_LIBRARY_PATH
 fi
 checkbox-support-fwts_test -l "$PLAINBOX_SESSION_SHARE"/fwts_cstates_results_after_suspend.log -t cstates

plugin: attachment
category_id: com.canonical.plainbox::cpu
estimated_duration: 0.5
id: cpu/cstates_results.log
requires: cpuinfo.platform not in ("aarch64", "armv7l", "s390x")
after: cpu/cstates
command:
 [ -e "${PLAINBOX_SESSION_SHARE}"/fwts_cstates_results.log ] && cat "${PLAINBOX_SESSION_SHARE}"/fwts_cstates_results.log
_summary:
 Attach C-States test log
_description:
 Attaches the FWTS desktop diagnosis results log to the submission.

plugin: attachment
category_id: com.canonical.plainbox::cpu
estimated_duration: 0.5
id: after-suspend-cpu/cstates_results.log
depends: com.canonical.certification::suspend/suspend_advanced_auto
requires: cpuinfo.platform not in ("aarch64", "armv7l", "s390x")
after: after-suspend-cpu/cstates
command:
 [ -e "${PLAINBOX_SESSION_SHARE}"/fwts_cstates_results_after_suspend.log ] && cat "${PLAINBOX_SESSION_SHARE}"/fwts_cstates_results_after_suspend.log
_summary:
 Attach C-States test log
_description:
 Attaches the FWTS desktop diagnosis results log to the submission.

plugin: shell
category_id: com.canonical.plainbox::cpu
id: cpu/cpuinfo_before_suspend
estimated_duration: 1.2
_summary: Verify that all the CPUs are online before suspending
command: cpuinfo_resource.py > "$PLAINBOX_SESSION_SHARE"/cpuinfo_before_suspend
_siblings: [
    { "id": "after-suspend-cpu/cpuinfo_after_suspend",
      "_summary": "Verify that all the CPUs are online after suspending",
      "command": "cpuinfo_resource.py | diff $PLAINBOX_SESSION_SHARE/cpuinfo_before_suspend -",
      "depends": "com.canonical.certification::suspend/suspend_advanced_auto"}
 ]

plugin: shell
category_id: com.canonical.plainbox::cpu
id: cpu/cpufreq_test-server
estimated_duration: 3.0
user: root
command: cpufreq_test.py -q
requires: cpuinfo.scaling == 'supported'
_summary:
 cpufreq scaling test
_description:
 Comprehensive testing of cpu scaling capabilities and directives via cpufreq.
