plugin: shell
category_id: com.canonical.plainbox::disk
id: disk/detect
flags: also-after-suspend
requires:
  executable.name == 'lsblk'
_summary: Gathers information about each disk detected
_description:
 Uses lsblk to gather information about each disk detected on the system
 under test.
command: disk_info.py
estimated_duration: 0.25

unit: template
template-resource: device
template-filter: device.category == 'DISK' and device.name != ''
template-unit: job
plugin: shell
category_id: com.canonical.plainbox::disk
id: disk/stats_{name}
flags: deprecated
user: root
estimated_duration: 10.0
command: disk_stats_test.sh {name}
_summary: Disk statistics for {product_slug}
_description:
 This test checks disk stats, generates some activity and rechecks stats to
 verify they've changed. It also verifies that disks appear in the various
 files they're supposed to.
 .
 This test will inspect the following disk:
 .
     product name: {product_slug}
     sysfs path: {path}
     device node path: /dev/{name}

unit: template
template-resource: device
template-filter: device.category == 'DISK'
plugin: shell
category_id: com.canonical.plainbox::disk
id: disk/smart_{name}
estimated_duration: 180.0
requires:
 executable.name == 'smartctl'
 block_device.smart == 'True' and block_device.name == '{name}'
_summary:
 Test SMART capabilities for {product_slug}
_description:
 This tests the SMART capabilities for {product_slug} (Note that this test may not work against hardware RAID)
user: root
command: disk_smart.py -b /dev/{name} -s 130 -t 530

unit: template
template-resource: device
template-filter: device.category == 'DISK'
plugin: shell
category_id: com.canonical.plainbox::disk
id: disk/read_performance_{name}
estimated_duration: 65.0
requires:
_summary: Disk performance test for {product_slug}
_description: Verify that disk storage performs at or above baseline performance
user: root
environ: DISK_READ_PERF DISK_NVME_READ_PERF DISK_MDADM_READ_PERF
command: disk_read_performance_test.sh {name}

unit: template
template-resource: device
template-filter: device.category == 'DISK'
plugin: shell
category_id: com.canonical.plainbox::disk
id: disk/storage_device_{name}
estimated_duration: 375.0
user: root
requires:
_summary: Disk I/O stress test for {product_slug}
_description: Take the path of the storage device and test is it a block device
command: storage_test.py {name}

unit: template
template-resource: device
template-filter: device.category == 'DISK'
plugin: shell
category_id: com.canonical.plainbox::disk
id: disk/fstrim_{name}
estimated_duration: 1.0
user: root
requires:
 block_device.rotation == 'no' and block_device.name == '{name}'
_summary: Filesystem TRIM check for {product_slug}
_description: Take the path of the storage device and test its TRIM capabilities
command: fstrim_test.py --device-file {name}

unit: template
template-resource: device
template-filter: device.category == 'DISK'
plugin: shell
category_id: com.canonical.plainbox::disk
id: disk/disk_stress_ng_{name}
estimated_duration: 4560.0
user: root
requires:
 executable.name == 'stress-ng'
 executable.name == 'uuidgen'
_summary: Disk stress_ng test for {product_slug}
_description: Disk stress_ng test for {product_slug}
command:
  if [ -n "$STRESS_NG_DISK_TIME" ]
  then
    echo "Found STRESS_NG_DISK_TIME env var, stress_ng disk running time is now: $STRESS_NG_DISK_TIME seconds"
    stress_ng_test.py disk --device {name} --base-time "$STRESS_NG_DISK_TIME"
  else
    echo "STRESS_NG_DISK_TIME env var is not found, stress_ng disk running time is default value"
    stress_ng_test.py disk --device {name} --base-time 240
  fi

unit: template
template-resource: device
template-filter: device.category == 'DISK'
plugin: shell
category_id: com.canonical.plainbox::disk
id: disk/disk_cpu_load_{name}
estimated_duration: 15
user: root
requires:
 block_device.state != 'removable' and block_device.name == '{name}'
 executable.name == 'bc'
_summary: Check of CPU load imposed by {product_slug}
_description: Check to ensure CPU load of {product_slug} is not too high
command: disk_cpu_load.sh {name}

plugin: user-interact
category_id: com.canonical.plainbox::disk
id: disk/hdd-parking
flags: also-after-suspend
estimated_duration: 60.0
requires:
    device.category == 'DISK'
    executable.name == 'hdapsd'
depends: input/accelerometer
user: root
command: hdd_parking.py
_description:
 PURPOSE:
  This test checks that a systems drive protection mechanism works properly.
  Which also known as free fall sensor checking in terms of laptop PC.
 STEPS:
  1. Click on Test
  2. Move the system under test around, ensuring it is raised and lowered at some point.
 VERIFICATION:
  The verification of this test is automated. Do not change the
  automatically selected result.

unit: template
template-resource: device
template-filter: device.driver == 'nvme' and device.category == 'OTHER'
plugin: shell
category_id: com.canonical.plainbox::disk
id: disk/apste_support_on_{name}
estimated_duration: 1.0
user: root
command: nvme get-feature -f 0x0c -H /dev/{name} | grep '(APSTE).*Enabled' && test -e /sys/class/nvme/{name}/power/pm_qos_latency_tolerance_us
_summary: Check support for Autonomous Power State Transition on {name}