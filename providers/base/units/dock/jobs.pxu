id: dock/docking
category_id: dock
plugin: manual
estimated_duration: 30.00
_summary: Docking test
_purpose:
    This test will check the device can be used after docking.
_steps:
    1. Dock the device to the docking unit.
_verification:
    Is the device working as expected after being docked?

id: dock/cold-plug
category_id: dock
plugin: manual
estimated_duration: 30.00
_summary: Docking test (cold plug)
_purpose:
    To ensure docking station is plugged before system boot up.
_steps:
    1. shut down system.
    2. plug in docking station.
    3. boot up system.
_verification:
    Did the system boot up with docking station plugged in?

id: dock/power-button
category_id: dock
depends: dock/cold-plug
plugin: manual
estimated_duration: 30.00
_summary: Docking test
_purpose:
    This test will test the power button on docking station
_steps:
    Skip this test if your docking station has no power button.
    1. press the power button on docking station.
_verification:
    Did the power management prompt pop up?

id: dock/monitor-displayport
category_id: dock-display
depends: dock/cold-plug
estimated_duration: 120.0
_summary: DisplayPort test on the dock
imports: from com.canonical.plainbox import manifest
requires:
  manifest.has_dp == 'True'
plugin: manual
_purpose:
    This test will check the DisplayPort(s) on the dock.
_steps:
    1. Connect a display (if not already connected) to the DisplayPort on the dock
    2. Repeat step 1 for each additional DisplayPorts, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor-dvi
category_id: dock-display
depends: dock/cold-plug
estimated_duration: 120.0
_summary: DVI port test on the dock
imports: from com.canonical.plainbox import manifest
requires:
  manifest.has_dvi == 'True'
plugin: manual
_purpose:
    This test will check the DVI port(s) on the dock.
_steps:
    1. Connect a display (if not already connected) to the DVI port on the dock
    2. Repeat step 1 for each additional DVI port, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor-hdmi
category_id: dock-display
depends: dock/cold-plug
estimated_duration: 120.0
_summary: HDMI port test on the dock
imports: from com.canonical.plainbox import manifest
requires:
  manifest.has_hdmi == 'True'
plugin: manual
_purpose:
    This test will check the HDMI port(s) on the dock.
_steps:
    1. Connect a display (if not already connected) to the HDMI port on the dock
    2. Repeat step 1 for each additional HDMI port, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor-vga
category_id: dock-display
depends: dock/cold-plug
estimated_duration: 120.0
_summary: VGA port test on the dock
imports: from com.canonical.plainbox import manifest
requires:
  manifest.has_vga == 'True'
plugin: manual
_purpose:
    This test will check the VGA port(s) on the dock.
_steps:
    1. Connect a display (if not already connected) to the VGA port on the dock
    2. Repeat step 1 for each additional VGA port, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor_type-c_displayport
category_id: dock-display
depends: dock/cold-plug
estimated_duration: 120
imports: from com.canonical.plainbox import manifest
requires:
  manifest.has_usbc_video == 'True'
plugin: manual
_summary: Display connected via DisplayPort using an USB Type-C port
_purpose:
    This test will check the connection of a screen using a "USB Type-C to DisplayPort" adapter.
_steps:
    1. Connect a display (if not already connected) to the USB Type-C port on
       your system using a "USB Type-C to DisplayPort" adapter
    2. Switch display modes between in your Display Settings, check if it can be
       set to mirrored, extended, displayed on external or onboard only
_verification:
    Was the desktop displayed correctly on the screen connected 
    using a "USB Type-C to DisplayPort" adapter in every mode?

id: dock/monitor_type-c_hdmi
category_id: dock-display
depends: dock/cold-plug
estimated_duration: 120
imports: from com.canonical.plainbox import manifest
requires:
  manifest.has_usbc_video == 'True'
plugin: manual
_summary: Display connected via HDMI using an USB Type-C port
_purpose:
    This test will check the connection of a screen using a "USB Type-C to HDMI" adapter.
_steps:
    1. Connect a display (if not already connected) to the USB Type-C port on
       your system using a "USB Type-C to HDMI" adapter
    2. Switch display modes between in your Display Settings, check if it can be
       set to mirrored, extended, displayed on external or onboard only
_verification:
    Was the desktop displayed correctly on the screen connected 
    using a "USB Type-C to HDMI" adapter in every mode?

id: dock/monitor_type-c_vga
category_id: dock-display
depends: dock/cold-plug
estimated_duration: 120
imports: from com.canonical.plainbox import manifest
requires:
  manifest.has_usbc_video == 'True'
plugin: manual
_summary: Display connected via VGA using an USB Type-C port
_purpose:
    This test will check the connection of a screen using a "USB Type-C to VGA" adapter.
_steps:
    1. Connect a display (if not already connected) to the USB Type-C port on
       your system using a "USB Type-C to VGA" adapter
    2. Switch display modes between in your Display Settings, check if it can be
       set to mirrored, extended, displayed on external or onboard only
_verification:
    Was the desktop displayed correctly on the screen connected 
    using a "USB Type-C to VGA" adapter in every mode?

id: dock/monitor-thunderbolt3
category_id: dock-display
depends: dock/cold-plug
imports: from com.canonical.plainbox import manifest
requires: manifest.has_thunderbolt3 == 'True'
estimated_duration: 120.0
_summary: Thunderbolt3 port test on the dock
plugin: manual
_purpose:
    This test will check the Thunderbolt3 port(s) on the dock.
_steps:
    Skip this test if the dock does not have a Thunderbolt3 port.
    1. Connect a display (if not already connected) to the Thunderbolt3 port on the dock
    2. Repeat step 1 for each additional Thunderbolt3 port, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor-dual-head
category_id: dock-display
depends: dock/cold-plug
estimated_duration: 120.0
_summary: Dual monitors test while docked
plugin: manual
_purpose:
    This test verifies that dual-monitor output works using the dock. You will need two external monitors to perform this test. Depends on the specification of the device to use 4K monitor or FHD monitor.
_steps:
    Skip this test if your video card or the dock do not support multiple monitors.
    1. If your dock provides more than one monitor outputs, connect two monitors
    2. Open the "Displays" tool (open the dash and search for "Displays")
    3. Configure your output to provide one desktop across all the monitors
    4. Open any application and drag its window from one monitor to the next.
_verification:
    Was the stretched desktop displayed correctly across all the screens?

id: dock/monitor-triple-head
category_id: dock-display
depends: dock/cold-plug
estimated_duration: 120.0
_summary: Tripple monitors test while docked
plugin: manual
_purpose:
    This test verifies that triple-monitor output works using the dock. You will need three external monitors to perform this test. Depends on the specification of the device to use 4K monitor or FHD monitor.
_steps:
    Skip this test if your video card or the dock do not support multiple monitors.
    1. If your dock provides more than one monitor outputs, connect three monitors
    2. Open the "Displays" tool (open the dash and search for "Displays")
    3. Turn off internal monitor
    4. Configure your output to provide one desktop across all the monitors
    5. Open any application and drag its window from one monitor to the next.
_verification:
    Was the stretched desktop displayed correctly across all the screens?

id: dock/keys-video-out
category_id: dock-display
depends: dock/cold-plug
estimated_duration: 120.0
_summary: Video Out hotkey test
plugin: manual
_purpose:
    Validate that the External Video hotkey is working as expected
_steps:
    1. Plug in an external monitor
    2. Press the display hotkey to change the monitors configuration
_verification:
    Check that the video signal can be mirrored, extended, displayed on external or onboard only.

### Audio Tests ###

plugin: shell
id: dock/audio-list-devices
category_id: dock-audio
estimated_duration: 1.0
_summary: List audio devices
depends: dock/cold-plug
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
command: cat /proc/asound/cards
_description: Test to detect audio devices

id: dock/audio-playback-hdmi
category_id: dock-audio
depends: dock/cold-plug
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name in ['pulseaudio-utils', 'pipewire']
_summary: HDMI audio test
plugin: user-interact-verify
flags: also-after-suspend
estimated_duration: 30.0
command:
 if check_audio_daemon.sh ; then
   pipewire_utils.py show -t audio
   pipewire_utils.py gst -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
 else
   audio_settings.py store --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
   audio_settings.py set --verbose --device=hdmi --volume=50
   gst_pipeline_test.py -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
   audio_settings.py restore --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    Dock HDMI audio interface verification
_steps:
    1. Plug an external HDMI device with sound to the dock (use only one HDMI/DisplayPort/Thunderbolt interface at a time for this test)
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click the Test button
_verification:
    Did you hear the sound from the HDMI device?

id: dock/audio-playback-displayport
category_id: dock-audio
depends: dock/cold-plug
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name in ['pulseaudio-utils', 'pipewire']
_summary: DisplayPort audio test
plugin: user-interact-verify
flags: also-after-suspend
estimated_duration: 30.0
command:
 if check_audio_daemon.sh ; then
   pipewire_utils.py show -t audio
   pipewire_utils.py gst -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
 else
   audio_settings.py store --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
   audio_settings.py set --verbose --device=hdmi --volume=50
   gst_pipeline_test.py -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
   audio_settings.py restore --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    Dock DisplayPort audio interface verification
_steps:
    1. Plug an external DisplayPort device with sound to the dock (use only one HDMI/DisplayPort/Thunderbolt interface at a time for this test)
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click the Test button
_verification:
    Did you hear the sound from the DisplayPort device?

id: dock/audio-playback-type-c-hdmi
category_id: dock-audio
depends: dock/cold-plug
imports: from com.canonical.plainbox import manifest
requires:
 manifest.has_usbc_video == 'True'
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name in ['pulseaudio-utils', 'pipewire']
_summary: HDMI audio test
plugin: user-interact-verify
estimated_duration: 30.0
command:
 if check_audio_daemon.sh ; then
   pipewire_utils.py show -t audio
   pipewire_utils.py gst -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
 else
   audio_settings.py store --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
   audio_settings.py set --verbose --device=hdmi --volume=50
   gst_pipeline_test.py -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
   audio_settings.py restore --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    Dock USB Type-C HDMI audio interface verification
_steps:
    1. Plug an external HDMI device with sound on a USB Type-C port using a "USB Typce-C to HDMI" adapter on Dock  (use only one HDMI/DisplayPort/Thunderbolt interface at a time for this test)
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click the Test button
_verification:
    Did you hear the sound from the HDMI device?

id: dock/audio-playback-type-c-displayport
category_id: dock-audio
depends: dock/cold-plug
imports: from com.canonical.plainbox import manifest
requires:
 manifest.has_usbc_video == 'True'
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name in ['pulseaudio-utils', 'pipewire']
_summary: HDMI audio test
plugin: user-interact-verify
flags: also-after-suspend
estimated_duration: 30.0
command:
 if check_audio_daemon.sh ; then
   pipewire_utils.py show -t audio
   pipewire_utils.py gst -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
 else
   audio_settings.py store --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
   audio_settings.py set --verbose --device=hdmi --volume=50
   gst_pipeline_test.py -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
   audio_settings.py restore --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    Dock USB Type-C Displayport audio interface verification
_steps:
    1. Plug an external Displayport device with sound on a USB Type-C port using a "USB Typce-C to Displayport" adapter on Dock  (use only one HDMI/DisplayPort/Thunderbolt interface at a time for this test)
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click the Test button
_verification:
    Did you hear the sound from the Displayport device?

id: dock/audio-playback-thunderbolt3
category_id: dock-audio
depends: dock/cold-plug
imports: from com.canonical.plainbox import manifest
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name in ['pulseaudio-utils', 'pipewire']
 manifest.has_thunderbolt3 == 'True'
_summary: DisplayPort audio test
plugin: user-interact-verify
flags: also-after-suspend
estimated_duration: 30.0
command:
 if check_audio_daemon.sh ; then
   pipewire_utils.py show -t audio
   pipewire_utils.py gst -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
 else
   audio_settings.py store --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
   audio_settings.py set --verbose --device=hdmi --volume=50
   gst_pipeline_test.py -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
   audio_settings.py restore --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    Dock Thunderbolt3 audio interface verification
_steps:
    1. Plug an external Thunderbolt3 device with sound to the dock (use only one HDMI/DisplayPort/Thunderbolt3 interface at a time for this test)
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click the Test button
_verification:
    Did you hear the sound from the Thunderbolt3 device?


id: dock/audio-playback-headphones
category_id: dock-audio
plugin: user-interact-verify
flags: also-after-suspend
estimated_duration: 30.0
_summary: Headphones output test
depends: dock/audio-list-devices
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name in ['pulseaudio-utils', 'pipewire']
command:
 if check_audio_daemon.sh ; then
   pipewire_utils.py show -t audio
   pipewire_utils.py gst -t 2 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
 else
   audio_settings.py store --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
   audio_settings.py set --device=pci --volume=50
   gst_pipeline_test.py -t 2 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
   EXIT_CODE=$?
   audio_settings.py restore --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    This test will check that headphones connector works correctly.
    (Skip this test if there is no headphone connector on the dock)
_steps:
    1. Connect a pair of headphones to the dock
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click the Test button to play a sound to your audio device
_verification:
    Did you hear a sound through the headphones and did the sound play without any distortion, clicks or other strange noises from your headphones?

plugin: user-interact-verify
category_id: dock-audio
id: dock/audio-alsa-record-playback-external
estimated_duration: 30.0
flags: also-after-suspend
_summary: External microphone plugged to the dock to record sound test
depends: dock/audio-playback-headphones
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gstreamer1.0-plugins-good' or package.name == 'gstreamer0.10-plugins-good'
 package.name in ['pulseaudio-utils', 'pipewire']
command:
 if check_audio_daemon.sh ; then
   pipewire_utils.py show -t audio
   alsa_record_playback.sh
   EXIT_CODE=$?
 else
   audio_settings.py store --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
   audio_settings.py set --device=pci --volume=50
   alsa_record_playback.sh
   EXIT_CODE=$?
   audio_settings.py restore --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    This test will check that recording sound using an external microphone works correctly
    (Skip this test if the dock does not have a microphone connector)
_steps:
    1. Connect a microphone to the dock's microphone port
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click "Test", then speak into the external microphone
    4. After a few seconds, your speech will be played back to you
_verification:
    Did you hear your speech played back?

plugin: shell
id: dock/audio-alsa-info-collect
category_id: dock-audio
estimated_duration: 2.0
_summary: Collect audio-related system information
depends: dock/cold-plug
command: alsa_info --no-dialog --no-upload --output "${PLAINBOX_SESSION_SHARE}"/alsa_info.log
_description:
 Collect audio-related system information. This data can be used to
 simulate this computer's audio subsystem and perform more detailed tests
 under a controlled environment.

plugin: attachment
id: dock/audio-alsa-info-attachment
category_id: dock-audio
depends: dock/audio-alsa-info-collect
estimated_duration: 1.0
_summary: Attach audio hardware data log to results
command: [ -e "${PLAINBOX_SESSION_SHARE}"/alsa_info.log ] && cat "${PLAINBOX_SESSION_SHARE}"/alsa_info.log
_description:
 Attaches the audio hardware data collection log to the results.

plugin: manual
id: dock/audio-external-lineout
category_id: dock-audio
depends: dock/cold-plug
estimated_duration: 30.0
_summary: Line-out connection test
_purpose:
     Check that external line-out connection works correctly
     (Skip this test if dock does not have a line out connector)
_steps:
     1. Insert cable to speakers (with built-in amplifiers) on the dock's line-out port
     2. Open system sound preferences, 'Output' tab, select 'Line-out' on the connector list. Click the Test button
     3. On the system sound preferences, select 'Internal Audio' on the device list and click 'Test Speakers' to check left and right channel
_verification:
     1. Do you hear a sound in the speakers? The internal speakers should *not* be muted automatically
     2. Do you hear the sound coming out on the corresponding channel?

plugin: user-interact-verify
id: dock/audio-external-linein
category_id: dock-audio
depends: dock/cold-plug
estimated_duration: 120.0
_summary: Line-in connection test
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gstreamer1.0-plugins-good' or package.name == 'gstreamer0.10-plugins-good'
 package.name in ['pulseaudio-utils', 'pipewire']
command:
 if check_audio_daemon.sh ; then
   pipewire_utils.py show -t audio
   alsa_record_playback.sh
   EXIT_CODE=$?
 else
   audio_settings.py store --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
   audio_settings.py set --device=pci --volume=50
   alsa_record_playback.sh
   EXIT_CODE=$?
   audio_settings.py restore --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    Check that external line-in connection works correctly
    (Skip this test if the dock does not have a line in connector)
_steps:
    1. Use a cable to connect the dock's line-in port to an external line-out source.
    2. Open system sound preferences, 'Input' tab, select 'Line-in' on the connector list. Click the Test button
    3. After a few seconds, your recording will be played back to you.
_verification:
    Did you hear your recording?

id: dock/audio-speaker-headphone-plug-detection
category_id: dock-audio
plugin: user-interact
depends: dock/cold-plug
estimated_duration: 60.0
_summary: Headphones recognized when plugged to the dock test
requires:
 device.category == 'AUDIO'
 package.name in ['pulseaudio-utils', 'pipewire']
command:
  if check_audio_daemon.sh ; then
    pipewire_utils.py monitor -t 30 -m sinks
  else
    pulse_active_port_change.py sinks
  fi
_purpose:
    Check that system detects speakers or headphones being plugged in
    (Skip this test if the dock does not have headphones connector)
_steps:
    1. Prepare a pair of headphones or speakers with a standard 3.5mm jack
    2. Locate the speaker / headphone jack on the dock under test
    3. Run the test (you have 30 seconds from now on)
    4. Plug headphones or speakers into the appropriate jack
    5. Unplug the device for subsequent tests.
_verification:
    Verification is automatic, no action is required.
    The test times out after 30 seconds (and fails in that case).

id: dock/audio-microphone-plug-detection
category_id: dock-audio
plugin: user-interact
depends: dock/cold-plug
estimated_duration: 60.0
_summary: Microphone recognized when plugged to the dock test
requires:
 device.category == 'AUDIO'
 package.name in ['pulseaudio-utils', 'pipewire']
command:
  if check_audio_daemon.sh ; then
    pipewire_utils.py monitor -t 30 -m sources
  else
    pulse_active_port_change.py sources
  fi
_purpose:
    Check that system detects a microphone being plugged in
    (Skip this test if the dock does not have a microphone connector)
_steps:
    1. Prepare a microphone with a standard 3.5mm jack
    2. Locate the microphone jack on the dock under test.
       Keep in mind that it may be shared with the headphone jack.
    3. Run the test (you have 30 seconds from now on)
    4. Plug the microphone into the appropriate jack
    5. Unplug the device for subsequent tests.
_verification:
    Verification is automatic, no action is required.
    The test times out after 30 seconds (and fails in that case).

### Networking Tests ###

id: dock/networking-gateway-ping
plugin: user-interact-verify
category_id: dock-network
depends: dock/cold-plug ethernet/detect
command: gateway_ping_test.py
estimated_duration: 10.00
_summary: Ping test using dock's Ethernet connectivity
_purpose:
    Tests whether the system has a working Internet connection.
_steps:
    1. Make sure the dock is connected to network using an Ethernet cable
    2. Make sure the laptop itself is not connected to any Ethernet cable
    3. Launch the test
_verification:
    Was the test able to ping the network using the Ethernet connection?

id: dock/networking-ntp
category_id: dock-network
plugin: user-interact-verify
depends: dock/cold-plug
requires: package.name == 'ntpdate'
user: root
command: network_ntp_test.py
estimated_duration: 10.00
_summary: NTP sync test using dock's Ethernet connectivity
_purpose:
    Test to see if we can sync local clock to an NTP server
_steps:
    1. Make sure the dock is connected to network using an Ethernet cable
    2. Make sure the laptop itself is not connected to any Ethernet cable
    3. Launch the test
_verification:
    Was the test able to synchronize system time using the Ethernet connection?

id: dock/mac-address-pass-through
category_id: dock-network
plugin: manual
depends: dock/cold-plug
estimated_duration: 180
_summary: MAC address passthrough function test
_purpose:
    Test MAC address passthrough function with dock station.
_steps:
    Skip this test if your dock station does not support MAC address passthrough.
    1. Find Passthrough MAC Address in BIOS setup
    2. Check "Passthrough MAC Address" is enabled
    2. Connect dock to system
    3. Boot to OS
    4. Run "ip a" in terminal to get dock ethernet MAC address
_verification:
    1. Is the Passthrough MAC Address the same as MAC address found in step 4?
    2. If BIOS doesn't have Passthrough MAC Address in BIOS setup, a bug should be filed.
    3. If dock ethernet MAC address is not the same as BIOS Passthrough MAC Address, a 
    bug should be filed.

### USB Tests ###

plugin: user-interact-verify
id: dock/usb-HID
category_id: dock-usb
estimated_duration: 20.0
_summary: USB HID device test
command: keyboard_test.py
_purpose:
    This test will check that you can use a USB HID device
_steps:
    1. Enable either a USB mouse or keyboard
    2. For mice, perform actions such as moving the pointer, right and left button clicks and double clicks
    3. For keyboards, click the Test button to lauch a small tool. Type some text and close the tool.
_verification:
    Did the device work as expected?

plugin: user-interact
id: dock/usb-insert
category_id: dock-usb
estimated_duration: 10.0
_summary: USB drive insertion test
command: removable_storage_watcher.py insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB storage device plugged on the dock.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB storage device, preferably a HDD,
       in one of the dock's port.
       Although a USB pen drive may be used it might cause performance
       related tests to fail. (Note: this test will time-out after 20
       seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/usb3-insert
category_id: dock-usb
estimated_duration: 10.0
_summary: USB3 drive insertion test
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3.0 storage device.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3.0 storage device, preferably a HDD,
       in one of the dock's USB 3.0 port. Although a USB 3.0 pen drive may
       be used it might cause performance related tests to fail.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/usb-remove
category_id: dock-usb
depends: dock/usb-insert
estimated_duration: 10.0
_summary: USB drive removal test
command: removable_storage_watcher.py remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB storage device
_steps:
    1. Click "Test" and remove the USB device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/usb3-remove
category_id: dock-usb
depends: dock/usb3-insert
estimated_duration: 10.0
_summary: USB3 drive removal test
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB 3.0 storage device
_steps:
    1. Click "Test" and remove the USB 3.0 device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: shell
id: dock/usb-storage-automated
category_id: dock-usb
depends: dock/usb-insert
user: root
estimated_duration: 45.0
_summary: USB drive storage test
command: removable_storage_test.py -s 268400000 usb
_description:
 This test is automated and executes after the dock/usb_insert test is run.

plugin: shell
id: dock/usb3-storage-automated
category_id: dock-usb
depends: dock/usb3-insert
user: root
estimated_duration: 45.0
_summary: USB3 drive storage test
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the dock/usb3_insert test is run.

### USB-C tests ###

plugin: user-interact
category_id: dock-usb
id: dock/usb-c/c-to-a-adapter/insert
imports: from com.canonical.plainbox import manifest
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
estimated_duration: 10.0
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3 storage device in a USB Type-C connector on the dock using a
    "Type-C to Type-A" adapter.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3 storage device in a USB Type-C port
       on the dock using a "USB Type-C to Type-A" adapter.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
category_id: dock-usb
id: dock/usb-c/insert
imports: from com.canonical.plainbox import manifest
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
estimated_duration: 10.0
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3 storage device in a USB Type-C connector on the dock.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3 storage device in a USB Type-C port
       on the dock.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
category_id: dock-usb
id: dock/usb-c/c-to-a-adapter/remove
imports: from com.canonical.plainbox import manifest
depends: dock/usb-c/c-to-a-adapter/insert
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
estimated_duration: 10.0
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
     This test will check that the system correctly detects the removal of
     a USB 3 storage device connected to a USB Type-C port using a "USB Type-C
     to Type-A" adapter.
_steps:
     1. Click "Test" and remove the USB 3 device.
        (Note: this test will time-out after 20 seconds.)
_verification:
     The verification of this test is automated. Do not change the
     automatically selected result.

plugin: user-interact
category_id: dock-usb
id: dock/usb-c/remove
imports: from com.canonical.plainbox import manifest
depends: dock/usb-c/insert
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
estimated_duration: 10.0
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
     This test will check that the system correctly detects the removal of
     a USB 3 storage device connected to a USB Type-C port.
_steps:
     1. Click "Test" and remove the USB 3 device.
        (Note: this test will time-out after 20 seconds.)
_verification:
     The verification of this test is automated. Do not change the
     automatically selected result.

plugin: shell
category_id: dock-usb
id: dock/usb-c/c-to-a-adapter/storage-automated
imports: from com.canonical.plainbox import manifest
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
depends: dock/usb-c/c-to-a-adapter/insert
user: root
estimated_duration: 45.0
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the usb-c/c-to-a-adapter/insert test
 is run.

plugin: shell
category_id: dock-usb
id: dock/usb-c/storage-automated
imports: from com.canonical.plainbox import manifest
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
depends: dock/usb-c/insert
user: root
estimated_duration: 45.0
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the usb-c/insert test
 is run.

plugin: user-interact
category_id: dock-usb
id: dock/usb-c/c-to-a-adapter/insert-after-suspend
depends: suspend/suspend_advanced_auto
imports: from com.canonical.plainbox import manifest
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
estimated_duration: 10.0
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3 storage device in a USB Type-C connector on the dock using a
    "Type-C to Type-A" adapter after suspend.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3 storage device in a USB Type-C port on
       the dock using a "USB Type-C to Type-A" adapter.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
category_id: dock-usb
id: dock/usb-c/insert-after-suspend
depends: suspend/suspend_advanced_auto
imports: from com.canonical.plainbox import manifest
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
estimated_duration: 10.0
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3 storage device in a USB Type-C connector on the dock after suspend
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3 storage device in a USB Type-C port
       on the dock.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
category_id: dock-usb
id: dock/usb-c/c-to-a-adapter/remove-after-suspend
imports: from com.canonical.plainbox import manifest
depends: dock/usb-c/c-to-a-adapter/insert-after-suspend
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
estimated_duration: 10.0
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
     This test will check that the system correctly detects the removal of
     a USB 3 storage device connected to a USB Type-C port using a "USB Type-C
     to Type-A" adapter after suspend.
_steps:
     1. Click "Test" and remove the USB 3 device.
        (Note: this test will time-out after 20 seconds.)
_verification:
     The verification of this test is automated. Do not change the
     automatically selected result.

plugin: user-interact
category_id: dock-usb
id: dock/usb-c/remove-after-suspend
imports: from com.canonical.plainbox import manifest
depends: dock/usb-c/insert-after-suspend
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
estimated_duration: 10.0
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
     This test will check that the system correctly detects the removal of
     a USB 3 storage device connected to a USB Type-C port after suspend.
_steps:
     1. Click "Test" and remove the USB 3 device.
        (Note: this test will time-out after 20 seconds.)
_verification:
     The verification of this test is automated. Do not change the
     automatically selected result.

plugin: shell
category_id: dock-usb
id: dock/usb-c/c-to-a-adapter/storage-automated-after-suspend
imports: from com.canonical.plainbox import manifest
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
depends: dock/usb-c/c-to-a-adapter/insert
user: root
estimated_duration: 45.0
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the usb-c/c-to-a-adapter/insert test
 is run.

plugin: shell
category_id: dock-usb
id: dock/usb-c/storage-automated-after-suspend
imports: from com.canonical.plainbox import manifest
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
depends: dock/usb-c/insert
user: root
estimated_duration: 45.0
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the usb-c/insert test
 is run.

### ACPI ###

id: dock/battery-charging
category_id: dock
_summary: Battery charging when docked test
plugin: shell
depends: dock/cold-plug
estimated_duration: 1.0
command:
 if [ "$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep "state" | awk '{print $2}')" = "discharging" ] ; then exit 1 ; fi
_description:
 This test will make sure the laptop is being charged while connected to the dock.

### Hot Plug ###

id: dock/hot-plug
category_id: dock-hotplug
plugin: manual
estimated_duration: 30.00
_summary: Docking test
_purpose:
    This test will check the device can be used after docking.
_steps:
    1. Unplug docking station.
    2. Replug in docking station.
_verification:
    Is the system working with problem (e.g. system hang) after docking station hot plugged in?

plugin: user-interact-verify
category_id: dock-hotplug
id: dock/hotplug-ethernet
depends: dock/hot-plug
command: network_check.py
estimated_duration: 10
_description:
 PURPOSE:
     This test will check wired connection after hotplug
 STEPS:
     1. Disable WiFi connection
     2. Click "Test" to verify that it's possible to establish a HTTP connection
 VERIFICATION:
     Did a notification show and was the connection correctly established?

plugin: user-interact
id: dock/hotplug-usb-insert
category_id: dock-hotplug
depends: dock/hot-plug
estimated_duration: 10.0
_summary: USB drive insertion test
command: removable_storage_watcher.py insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB storage device plugged on the dock.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB storage device, preferably a HDD,
       in one of the dock's port.
       Although a USB pen drive may be used it might cause performance
       related tests to fail. (Note: this test will time-out after 20
       seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/hotplug-usb3-insert
category_id: dock-hotplug
depends: dock/hot-plug
estimated_duration: 10.0
_summary: USB3 drive insertion test
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3.0 storage device after dock hot plugged in.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3.0 storage device, preferably a HDD,
       in one of the dock's USB 3.0 port. Although a USB 3.0 pen drive may
       be used it might cause performance related tests to fail.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: shell
id: dock/hotplug-usb-storage-automated
category_id: dock-hotplug
depends: dock/hotplug-usb-insert
user: root
estimated_duration: 45.0
_summary: USB drive storage test
command: removable_storage_test.py -s 268400000 usb
_description:
 This test is automated and executes after the dock/usb_insert test is run.

plugin: shell
id: dock/hotplug-usb3-storage-automated
category_id: dock-hotplug
depends: dock/hotplug-usb3-insert
user: root
estimated_duration: 45.0
_summary: USB3 drive storage test
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the dock/usb3_insert test is run.

plugin: user-interact
id: dock/hotplug-usb-remove
category_id: dock-hotplug
depends: dock/hotplug-usb-insert
estimated_duration: 10.0
_summary: USB drive removal test
command: removable_storage_watcher.py remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB storage device
_steps:
    1. Click "Test" and remove the USB device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/hotplug-usb3-remove
category_id: dock-hotplug
depends: dock/hotplug-usb3-insert
estimated_duration: 10.0
_summary: USB3 drive removal test
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB 3.0 storage device after dock hot plugged in
_steps:
    1. Click "Test" and remove the USB 3.0 device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

id: dock/hotplug-playback-type-c-displayport
category_id: dock-hotplug
depends: dock/hot-plug
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name in ['pulseaudio-utils', 'pipewire']
_summary: HDMI audio test
plugin: user-interact-verify
flags: also-after-suspend
estimated_duration: 30.0
command:
 if check_audio_daemon.sh ; then
    pipewire_utils.py show -t audio
    pipewire_utils.py gst -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
    EXIT_CODE=$?
 else
    audio_settings.py store --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
    audio_settings.py set --verbose --device=hdmi --volume=50
    gst_pipeline_test.py -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
    EXIT_CODE=$?
    audio_settings.py restore --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    Dock USB Type-C Displayport audio interface verification
_steps:
    1. Plug an external Displayport device with sound on a USB Type-C port using a "USB Typce-C to Displayport" adapter on Dock  (use only one HDMI/DisplayPort/Thunderbolt interface at a time for this test)
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click the Test button
_verification:
    Did you hear the sound from the Displayport device?

id: dock/hotplug-playback-thumderbolt3
category_id: dock-hotplug
depends: dock/hot-plug
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name in ['pulseaudio-utils', 'pipewire']
_summary: HDMI audio test
plugin: user-interact-verify
flags: also-after-suspend
estimated_duration: 30.0
command:
 if check_audio_daemon.sh ; then
    pipewire_utils.py show -t audio
    pipewire_utils.py gst -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
    EXIT_CODE=$?
 else
    audio_settings.py store --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
    audio_settings.py set --verbose --device=hdmi --volume=50
    gst_pipeline_test.py -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
    EXIT_CODE=$?
    audio_settings.py restore --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    Dock Thunderbolt3 audio interface verification
_steps:
    1. Plug an external Thunderbolt3 device with sound (Use only one HDMI/DisplayPort/Thunderbolt3 interface at a time for this test)
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click the Test button
_verification:
    Did you hear the sound from the HDMI device?

id: dock/hotplug-playback-displayport
category_id: dock-hotplug
depends: dock/hot-plug
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name in ['pulseaudio-utils', 'pipewire']
_summary: DisplayPort audio test
plugin: user-interact-verify
flags: also-after-suspend
estimated_duration: 30.0
command:
 if check_audio_daemon.sh ; then
    pipewire_utils.py show -t audio
    pipewire_utils.py gst -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
    EXIT_CODE=$?
 else
    audio_settings.py store --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
    audio_settings.py set --verbose --device=hdmi --volume=50
    gst_pipeline_test.py -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
    EXIT_CODE=$?
    audio_settings.py restore --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    Dock DisplayPort audio interface verification
_steps:
    1. Plug an external DisplayPort device with sound to the dock (use only one HDMI/DisplayPort/Thunderbolt interface at a time for this test)
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click the Test button
_verification:
    Did you hear the sound from the DisplayPort device?

id: dock/hotplug-playback-hdmi
category_id: dock-hotplug
depends: dock/hot-plug
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name in ['pulseaudio-utils', 'pipewire']
_summary: HDMI audio test
plugin: user-interact-verify
flags: also-after-suspend
estimated_duration: 30.0
command:
 if check_audio_daemon.sh ; then
    pipewire_utils.py show -t audio
    pipewire_utils.py gst -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
    EXIT_CODE=$?
 else
    audio_settings.py store --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
    audio_settings.py set --verbose --device=hdmi --volume=50
    gst_pipeline_test.py -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
    EXIT_CODE=$?
    audio_settings.py restore --verbose --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
 fi
 exit $EXIT_CODE
_purpose:
    Dock HDMI audio interface verification
_steps:
    1. Plug an external HDMI device with sound to the dock (use only one HDMI/DisplayPort/Thunderbolt interface at a time for this test)
    2. Go to the Sound settings and make sure the correct Output is selected
    3. Click the Test button
_verification:
    Did you hear the sound from the HDMI device?

### Network ###

plugin: shell
id: dock/network-before-suspend
category_id: dock-network
depends: ethernet/detect
estimated_duration: 1.2
_summary: Network status before suspend
_description: Record the current network before suspending.
command: set -o pipefail; gateway_ping_test.py | tee "$PLAINBOX_SESSION_SHARE"/network_before_suspend.txt

plugin: shell
id: dock/audio-before-suspend
category_id: dock-audio
estimated_duration: 1.0
_summary: Audio status before suspend
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
_description: Record mixer settings before suspending.
command: audio_settings.py store --file="$PLAINBOX_SESSION_SHARE"/audio_settings_before_suspend



id: dock/networking-gateway-ping-after-suspend
category_id: dock-network
plugin: shell
depends: suspend/suspend_advanced_auto ethernet/detect
command: gateway_ping_test.py
estimated_duration: 2.00
_summary: Network gateway ping after suspend
_description: Tests whether the system has a working Internet connection.

plugin: user-interact
id: dock/usb-insert-after-suspend
category_id: dock-usb
depends: suspend/suspend_advanced_auto
estimated_duration: 10.0
_summary: USB drive insertion after resuming
command: removable_storage_watcher.py insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB storage device plugged on the dock after suspend.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB storage device, preferably a HDD,
       in one of the dock's port.
       Although a USB pen drive may be used it might cause performance
       related tests to fail. (Note: this test will time-out after 20
       seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

id: dock/power-button-after-suspend
category_id: dock
depends: suspend/suspend_advanced_auto
plugin: manual
estimated_duration: 30.00
_summary: Docking test
_purpose:
    This test will test the power button on docking station after suspend
_steps:
    Skip this test if your docking station has no power button.
    1. press the power button on docking station.
_verification:
    Did the power management prompt pop up?

plugin: user-interact
id: dock/usb3-insert-after-suspend
category_id: dock-usb
depends: suspend/suspend_advanced_auto
estimated_duration: 10.0
_summary: USB3 drive insertion after resuming
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3.0 storage device after suspend.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3.0 storage device, preferably a HDD,
       in one of the dock's USB 3.0 port. Although a USB 3.0 pen drive may
       be used it might cause performance related tests to fail.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/usb-remove-after-suspend
category_id: dock-usb
depends: dock/usb-insert-after-suspend
estimated_duration: 10.0
_summary: USB drive removal after resuming
command: removable_storage_watcher.py remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB storage device after suspend
_steps:
    1. Click "Test" and remove the USB device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/usb3-remove-after-suspend
category_id: dock-usb
depends: dock/usb3-insert-after-suspend
estimated_duration: 10.0
_summary: USB3 drive removal after resuming
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB 3.0 storage device after suspend
_steps:
    1. Click "Test" and remove the USB 3.0 device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: shell
id: dock/usb-storage-automated-after-suspend
category_id: dock-usb
depends: dock/usb-insert-after-suspend
user: root
estimated_duration: 45.0
_summary: USB drive storage test after resuming
command: removable_storage_test.py -s 268400000 usb
_description:
 This test is automated and executes after the dock/usb-insert test is run.

plugin: shell
id: dock/usb3-storage-automated-after-suspend
category_id: dock-usb
depends: dock/usb3-insert-after-suspend
user: root
estimated_duration: 45.0
_summary: USB3 drive storage test after resuming
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the dock/usb3-insert test is run.

plugin: user-interact-verify
id: dock/usb-HID-after-suspend
category_id: dock-usb
depends: suspend/suspend_advanced_auto
estimated_duration: 20.0
_summary: USB HID device test after resuming
command: keyboard_test.py
_purpose:
    This test will check that you can use a USB HID device
_steps:
    1. Enable either a USB mouse or keyboard
    2. For mice, perform actions such as moving the pointer, right and left button clicks and double clicks
    3. For keyboards, click the Test button to lauch a small tool. Type some text and close the tool.
_verification:
    Did the device work as expected?

id: dock/monitor-displayport-after-suspend
category_id: dock-display
depends: suspend/suspend_advanced_auto
estimated_duration: 120.0
_summary: DisplayPort test on the dock after resuming
plugin: manual
_purpose:
    This test will check the DisplayPort(s) on the dock after resuming.
_steps:
    Skip this test if the dock does not have a DisplayPort.
    1. Connect a display (if not already connected) to the DisplayPort on the dock
    2. Repeat step 1 for each additional DisplayPorts, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor-dvi-after-suspend
category_id: dock-display
depends: suspend/suspend_advanced_auto
estimated_duration: 120.0
_summary: DVI port test on the dock after resuming
plugin: manual
_purpose:
    This test will check the DVI port(s) on the dock after resuming.
_steps:
    Skip this test if the dock does not have a DVI port.
    1. Connect a display (if not already connected) to the DVI port on the dock
    2. Repeat step 1 for each additional DVI port, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor-hdmi-after-suspend
category_id: dock-display
depends: suspend/suspend_advanced_auto
estimated_duration: 120.0
_summary: HDMI port test on the dock after resuming
plugin: manual
_purpose:
    This test will check the HDMI port(s) on the dock after resuming.
_steps:
    Skip this test if the dock does not have a HDMI port.
    1. Connect a display (if not already connected) to the HDMI port on the dock
    2. Repeat step 1 for each additional HDMI port, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor-vga-after-suspend
category_id: dock-display
depends: suspend/suspend_advanced_auto
estimated_duration: 120.0
_summary: VGA port test on the dock after resuming
plugin: manual
_purpose:
    This test will check the VGA port(s) on the dock after resuming.
_steps:
    Skip this test if the dock does not have a VGA port.
    1. Connect a display (if not already connected) to the VGA port on the dock
    2. Repeat step 1 for each additional VGA port, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor_type-c_displayport-after-suspend
category_id: dock-display
depends: suspend/suspend_advanced_auto
estimated_duration: 120
plugin: manual
_summary: Display connected via DisplayPort using an USB Type-C port after resuming
_purpose:
    This test will check the connection of a screen using a "USB Type-C to DisplayPort" adapter after resuming.
_steps:
    Skip this test if the dock does not have a USB Type-C port.
    1. Connect a display (if not already connected) to the USB Type-C port on
       your system using a "USB Type-C to DisplayPort" adapter
    2. Switch display modes between in your Display Settings, check if it can be
       set to mirrored, extended, displayed on external or onboard only
_verification:
    Was the desktop displayed correctly on the screen connected 
    using a "USB Type-C to DisplayPort" adapter in every mode?

id: dock/monitor_type-c_hdmi-after-suspend
category_id: dock-display
depends: suspend/suspend_advanced_auto
estimated_duration: 120
plugin: manual
_summary: Display connected via HDMI using an USB Type-C port after resuming
_purpose:
    This test will check the connection of a screen using a "USB Type-C to HDMI" adapter after resuming.
_steps:
    Skip this test if the dock does not have a USB Type-C port.
    1. Connect a display (if not already connected) to the USB Type-C port on
       your system using a "USB Type-C to HDMI" adapter
    2. Switch display modes between in your Display Settings, check if it can be
       set to mirrored, extended, displayed on external or onboard only
_verification:
    Was the desktop displayed correctly on the screen connected 
    using a "USB Type-C to HDMI" adapter in every mode?

id: dock/monitor_type-c_vga-after-suspend
category_id: dock-display
depends: suspend/suspend_advanced_auto
estimated_duration: 120
plugin: manual
_summary: Display connected via VGA using an USB Type-C port after resuming
_purpose:
    This test will check the connection of a screen using a "USB Type-C to VGA" adapter after resuming.
_steps:
    Skip this test if the dock does not have a USB Type-C port.
    1. Connect a display (if not already connected) to the USB Type-C port on
       your system using a "USB Type-C to VGA" adapter
    2. Switch display modes between in your Display Settings, check if it can be
       set to mirrored, extended, displayed on external or onboard only
_verification:
    Was the desktop displayed correctly on the screen connected 
    using a "USB Type-C to VGA" adapter in every mode?

id: dock/monitor-dual-head-after-suspend
category_id: dock-display
depends: suspend/suspend_advanced_auto
estimated_duration: 120.0
_summary: Dual monitors test while docked after suspend
plugin: manual
_purpose:
    This test verifies that dual-monitor output works using the dock after suspend. You will need two external monitors to perform this test. Depends on the specification of the device to use 4K monitor or FHD monitor.
_steps:
    Skip this test if your video card or the dock do not support multiple monitors.
    1. If your dock provides more than one monitor outputs, connect two monitors
    2. Open the "Displays" tool (open the dash and search for "Displays")
    3. Configure your output to provide one desktop across all the monitors
    4. Open any application and drag its window from one monitor to the next.
_verification:
    Was the stretched desktop displayed correctly across all the screens?

id: dock/monitor-triple-head-after-suspend
category_id: dock-display
depends: suspend/suspend_advanced_auto
estimated_duration: 120.0
_summary: Tripple monitors test while docked after suspend
plugin: manual
_purpose:
    This test verifies that triple-monitor output works using the dock after suspend. You will need three external monitors to perform this test. Depends on the specification of the device to use 4K monitor or FHD monitor.
_steps:
    Skip this test if your video card or the dock do not support multiple monitors.
    1. If your dock provides more than one monitor outputs, connect three monitors
    2. Open the "Displays" tool (open the dash and search for "Displays")
    3. Turn off internal monitor
    4. Configure your output to provide one desktop across all the monitors
    5. Open any application and drag its window from one monitor to the next.
_verification:
    Was the stretched desktop displayed correctly across all the screens?

### Suspend, Undocked, Resume ###

id: dock/suspend-undock-resume
category_id: suspend-undock-resume
plugin: manual
estimated_duration: 120.00
_summary: Suspend the device, undock it and resume it
_purpose:
    This test will check the device can be suspended, undocked and resumed properly
_steps:
    1. If the laptop is currently undocked, dock it now
    2. Suspend the laptop (e.g. by closing its lid)
    3. Undock the laptop
    4. Resume the laptop (e.g. by pressing its Power button)
    5. Enable wireless if it was disabled
_verification:
    Is the device working as expected after being undocked and resumed?

plugin: shell
id: dock/wireless-connection-after-suspend-wpa-bg
category_id: suspend-undock-resume
depends: dock/suspend-undock-resume
estimated_duration: 20.0
_summary: Wireless connection after suspend (WPA BG)
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: WPA_BG_SSID WPA_BG_PSK
command:
    # shellcheck disable=SC2064
    trap "nmcli con delete id $WPA_BG_SSID" EXIT
    if create_connection.py wifi "$WPA_BG_SSID" --security=wpa --key="$WPA_BG_PSK"; then
        INTERFACE=$(nmcli dev status | awk '/802-11-wireless/ {print $1}')
        iw dev "$INTERFACE" link
        gateway_ping_test.py --interface="$INTERFACE"
    else
        exit 1
    fi
_description:
 Tests that the systems wireless hardware can connect to a router using WPA
 security and the 802.11b/g protocols after the system has been suspended.

plugin: shell
id: dock/wireless-connection-after-suspend-open-bg
category_id: suspend-undock-resume
depends: dock/suspend-undock-resume
estimated_duration: 1.2
_summary: Wireless connection after suspend (Open BG)
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: OPEN_BG_SSID
command:
    # shellcheck disable=SC2064
    trap "nmcli con delete id $OPEN_BG_SSID" EXIT
    if create_connection.py wifi "$OPEN_BG_SSID"; then
        INTERFACE=$(nmcli dev status | awk '/802-11-wireless/ {print $1}')
        iw dev "$INTERFACE" link
        gateway_ping_test.py --interface="$INTERFACE"
    else
        exit 1
    fi
_description:
 Tests that the systems wireless hardware can connect to a router using no
 security and the 802.11b/g protocols after the system has been suspended.

plugin: shell
id: dock/wireless-connection-after-suspend-wpa-n
category_id: suspend-undock-resume
depends: dock/suspend-undock-resume
estimated_duration: 1.2
_summary: Wireless connection after suspend (WPA N)
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: WPA_N_SSID WPA_N_PSK
command:
    # shellcheck disable=SC2064
    trap "nmcli con delete id $WPA_N_SSID" EXIT
    if create_connection.py wifi "$WPA_N_SSID" --security=wpa --key="$WPA_N_PSK"; then
        INTERFACE=$(nmcli dev status | awk '/802-11-wireless/ {print $1}')
        iw dev "$INTERFACE" link
        gateway_ping_test.py --interface="$INTERFACE"
    else
        exit 1
    fi
_description:
 Tests that the systems wireless hardware can connect to a router using WPA
 security and the 802.11n protocol after the system has been suspended.

plugin: shell
id: dock/wireless-connection-after-suspend-open-n
category_id: suspend-undock-resume
depends: dock/suspend-undock-resume
estimated_duration: 1.2
_summary: Wireless connection after suspend (Open N)
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: OPEN_N_SSID
command:
    # shellcheck disable=SC2064
    trap "nmcli con delete id $OPEN_N_SSID" EXIT
    if create_connection.py wifi "$OPEN_N_SSID"; then
        INTERFACE=$(nmcli dev status | awk '/802-11-wireless/ {print $1}')
        iw dev "$INTERFACE" link
        gateway_ping_test.py --interface="$INTERFACE"
    else
        exit 1
    fi
_description:
 Tests that the systems wireless hardware can connect to a router using no
 security and the 802.11n protocol after the system has been suspended.

plugin: shell
id: dock/wireless-connection-after-suspend-wpa-ac
category_id: suspend-undock-resume
depends: dock/suspend-undock-resume
estimated_duration: 1.2
_summary: Wireless connection after suspend (WPA AC)
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
 IEEE_80211.ac == 'supported'
user: root
environ: WPA_AC_SSID WPA_AC_PSK
command:
    # shellcheck disable=SC2064
    trap "nmcli con delete id $WPA_AC_SSID" EXIT
    if create_connection.py wifi "$WPA_AC_SSID" --security=wpa --key="$WPA_AC_PSK"; then
        INTERFACE=$(nmcli dev status | awk '/802-11-wireless/ {print $1}')
        iw dev "$INTERFACE" link
        gateway_ping_test.py --interface="$INTERFACE"
    else
        exit 1
    fi
_description:
 Tests that the systems wireless hardware can connect to a router using WPA
 security and the 802.11ac protocol after the system has been suspended.

plugin: shell
id: dock/wireless-connection-after-suspend-open-ac
category_id: suspend-undock-resume
depends: dock/suspend-undock-resume
estimated_duration: 1.2
_summary: Wireless connection after suspend (Open AC)
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
 IEEE_80211.ac == 'supported'
user: root
environ: OPEN_AC_SSID
command:
    # shellcheck disable=SC2064
    trap "nmcli con delete id $OPEN_AC_SSID" EXIT
    if create_connection.py wifi "$OPEN_AC_SSID"; then
        INTERFACE=$(nmcli dev status | awk '/802-11-wireless/ {print $1}')
        iw dev "$INTERFACE" link
        gateway_ping_test.py --interface="$INTERFACE"
    else
        exit 1
    fi
_description:
 Tests that the systems wireless hardware can connect to a router using no
 security and the 802.11ac protocol after the system has been suspended.

plugin: shell
id: dock/audio-after-suspend-undock-resume
category_id: dock-audio
estimated_duration: 1.0
_summary: Audio after resuming test
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
depends: dock/suspend-undock-resume dock/audio-before-suspend
_description: Verify that mixer settings after suspend are the same as before suspend.
command:
  audio_settings.py store --file="$PLAINBOX_SESSION_SHARE"/audio_settings_after_suspend
  diff "$PLAINBOX_SESSION_SHARE"/audio_settings_before_suspend "$PLAINBOX_SESSION_SHARE"/audio_settings_after_suspend

plugin: shell
id: dock/record-playback-after-suspend-undock-resume
category_id: dock-audio
estimated_duration: 10.0
_summary: Record playback after resuming
depends: dock/suspend-undock-resume
requires:
 package.name == 'python3-gi'
 package.name == 'gir1.2-gstreamer-1.0'
 package.name == 'libgstreamer1.0-0'
 package.name == 'gstreamer1.0-plugins-good'
 package.name in ['gstreamer1.0-pulseaudio', 'gstreamer1.0-pipewire']
 package.name == 'alsa-base'
 package.name in ['pulseaudio-utils', 'pipewire']
 device.category == 'AUDIO'
command:
  if check_audio_daemon.sh ; then
    pipewire_test.py
  else
    audio_test.py
  fi
_description:
 This will check to make sure that your audio device works properly after a suspend and resume.  This may work fine with speakers and onboard microphone, however, it works best if used with a cable connecting the audio-out jack to the audio-in jack.

plugin: user-interact
id: dock/usb3-insert-after-suspend-undock-resume
category_id: suspend-undock-resume
depends: dock/suspend-undock-resume
estimated_duration: 10.0
_summary: USB3 drive insertion test
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3.0 storage device after suspend, undocked, resume.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3.0 storage device, preferably a HDD,
       in one of the dock's USB 3.0 port. Although a USB 3.0 pen drive may
       be used it might cause performance related tests to fail.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: shell
id: dock/usb3-storage-automated-after-suspend-undock-resume
category_id: suspend-undock-resume
depends: dock/usb3-insert-after-suspend-undock-resume
user: root
estimated_duration: 45.0
_summary: USB3 drive storage test
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the dock/usb3_insert test is run.

plugin: user-interact
id: dock/usb3-remove-after-suspend-undock-resume
category_id: suspend-undock-resume
depends: dock/usb3-insert-after-suspend-undock-resume
estimated_duration: 10.0
_summary: USB3 drive removal test
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB 3.0 storage device after suspend, undocked, resume.
_steps:
    1. Click "Test" and remove the USB 3.0 device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

id: dock/monitor-displayport-after-suspend-undock-resume
category_id: suspend-undock-resume
depends: dock/suspend-undock-resume
estimated_duration: 120.0
_summary: DisplayPort test on the dock
plugin: manual
_purpose:
    This test will check the DisplayPort(s) on the system after suspend, undocked, resume.
_steps:
    Skip this test if the system does not have a DisplayPort.
    1. Connect a display (if not already connected) to the DisplayPort on the system
    2. Repeat step 1 for each additional DisplayPorts, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor-hdmi-after-suspend-undock-resume
category_id: suspend-undock-resume
depends: dock/suspend-undock-resume
estimated_duration: 120.0
_summary: HDMI port test on the dock
plugin: manual
_purpose:
    This test will check the HDMI port(s) on the system after suspend, undocked, resume.
_steps:
    Skip this test if the system does not have a HDMI port.
    1. Connect a display (if not already connected) to the HDMI port on the system
    2. Repeat step 1 for each additional HDMI port, if any
_verification:
    Was the desktop displayed correctly on both screens?

plugin: manual
id: dock/expresscard-verification
category_id: dock
estimated_duration: 10.0
_summary: ExpressCard slot verification
depends: dock/cold-plug
_purpose:
    This will verify that an ExpressCard slot on the dock can detect inserted devices.
_steps:
    Skip this test if you do not have an ExpressCard slot on the dock.
    1. Plug an ExpressCard device into the ExpressCard slot
_verification:
    Was the device correctly detected?

plugin: user-interact
id: dock/firewire-insert
category_id: dock
estimated_duration: 20.0
_summary: FireWire HDD insertion test
depends: dock/cold-plug
command: removable_storage_watcher.py insert firewire
_purpose:
    This test will check the system can detect the insertion of a FireWire HDD on the dock
_steps:
    (Skip this test id there is no FireWire connector on the dock)
    1. Click 'Test' to begin the test. This test will
       timeout and fail if the insertion has not been detected within 20 seconds.
    2. Plug a FireWire HDD into an available FireWire port.
_verification:
    The verification of this test is automated. Do not change the automatically
    selected result

plugin: shell
id: dock/firewire-storage-test
category_id: dock
estimated_duration: 45.0
_summary: FireWire HDD storage test
depends: dock/cold-plug dock/firewire-insert
user: root
command: removable_storage_test.py -s 268400000 firewire
_description:
 This is an automated test which performs read/write operations on an attached
 FireWire HDD

plugin: user-interact
id: dock/firewire-remove
category_id: dock
estimated_duration: 20.0
_summary: FireWire HDD removal test
depends: dock/firewire-insert
command: removable_storage_watcher.py remove firewire
_purpose:
    This test will check the system can detect the removal of a FireWire HDD
_steps:
    1. Click 'Test' to begin the test. This test will timeout and fail if
       the removal has not been detected within 20 seconds.
    2. Remove the previously attached FireWire HDD from the FireWire port on
       the dock.
_verification:
    The verification of this test is automated. Do not change the automatically
    selected result

plugin: user-interact
id: dock/esata-insert
category_id: dock
estimated_duration: 20.0
_summary: eSATA HDD insertion test
depends: dock/cold-plug
command: removable_storage_watcher.py insert ata_serial_esata
_purpose:
    This test will check the system can detect the insertion of an eSATA HDD on the dock
_steps:
    (Skip this test if there are no eSATA connectors on the dock)
    1. Click 'Test' to begin the test. This test will
       timeout and fail if the insertion has not been detected within 20 seconds.
    2. Plug an eSATA HDD into an available eSATA port on the dock.
_verification:
    The verification of this test is automated. Do not change the automatically
    selected result

plugin: shell
id: dock/esata-storage-test
category_id: dock
estimated_duration: 20.0
_summary: eSATA HDD storage test
user: root
depends: dock/esata-insert
command: removable_storage_test.py -s 268400000 ata_serial_esata
_description:
 This is an automated test which performs read/write operations on an attached
 eSATA HDD

plugin: user-interact
id: dock/esata-remove
category_id: dock
estimated_duration: 20.0
_summary: eSATA HDD removal test
depends: dock/esata-insert
command: removable_storage_watcher.py remove ata_serial_esata
_purpose:
    This test will check the system can detect the removal of an eSATA HDD from the dock
_steps:
    1. Click 'Test' to begin the test. This test will timeout and fail if
       the removal has not been detected within 20 seconds.
    2. Remove the previously attached eSATA HDD from the eSATA port on the dock.
_verification:
    The verification of this test is automated. Do not change the automatically
    selected result

plugin: manual
id: dock/optical-read
category_id: dock
depends: dock/cold-plug
estimated_duration: 180.0
_summary: Optical media (CD) read test
_purpose:
    This test will check the dock's ability to read CD media
_steps:
    (Skip this test if the dock does not have an optical reader)
    1. Insert appropriate non-blank media into your optical drive(s). Movie and Audio Disks may not work. Self-created data disks have the greatest chance of working.
    2. Try to copy a few files from the optical media to the computer.
_verification:
    Are the files properly copied to the computer?    

plugin: manual
id: dock/optical-write
category_id: dock
depends: dock/optical-read
estimated_duration: 300.0
_summary: Optical media (CD-RW, DVD-RW) writing test
_purpose:
    This test will check the dock's ability to write CD/DVD media.
    Depending on what the dock's optical drive support, you will need
    a blank CD-R, CD-RW, DVD-R and/or DVD-RW.
_steps:
    1. Insert a blank CD-R into the dock's drive
    2. Open Brasero Disc Burner and write some files on the CD-R
    3. Repeat steps 1-2 for other compatible media (CD-RW, DVD-R, DVD-RW)
_verification:
    Are all kinds of discs properly written?

plugin: user-interact
id: dock/thunderbolt3-insert
category_id: dock
estimated_duration: 40.0
depends: dock/cold-plug
imports: from com.canonical.plainbox import manifest
requires: manifest.has_thunderbolt3 == 'True'
flags: also-after-suspend
command: removable_storage_watcher.py insert --timeout 40 scsi
_summary: Thunderbolt3 storage insertion detection
_purpose:
    This test will check if the connection of a Thunderbolt3 HDD to the dock could be detected
_steps:
    1. Click 'Test' to begin the test. This test will
       timeout and fail if the insertion has not been detected within 40 seconds.
    2. Plug a Thunderbolt3 HDD into an available Thunderbolt3 port on the dock;
       if it's not mounted automatically, please click the HDD icon to mount it.
_verification:
    The verification of this test is automated. Do not change the automatically
    selected result

plugin: shell
id: dock/thunderbolt3-storage-test
category_id: dock
estimated_duration: 45.0
user: root
depends: dock/thunderbolt3-insert
imports: from com.canonical.plainbox import manifest
requires: manifest.has_thunderbolt3 == 'True'
flags: also-after-suspend
command: removable_storage_test.py -s 268400000 scsi
_summary: Thunderbolt3 storage test
_description:
 This is an automated test which performs read/write operations on an attached
 Thunderbolt HDD

plugin: user-interact
id: dock/thunderbolt3-remove
category_id: dock
estimated_duration: 20.0
depends: dock/thunderbolt3-insert
imports: from com.canonical.plainbox import manifest
requires: manifest.has_thunderbolt3 == 'True'
flags: also-after-suspend
command: removable_storage_watcher.py remove scsi
_summary: Thunderbolt3 storage removal detection
_purpose:
    This test will check the system can detect the removal of a Thunderbolt3 HDD
_steps:
    1. Click 'Test' to begin the test. This test will timeout and fail if
       the removal has not been detected within 20 seconds.
    2. Remove the previously attached Thunderbolt3 HDD from the Thunderbolt3 port.
_verification:
    The verification of this test is automated. Do not change the automatically
    selected result

plugin: user-interact-verify
category_id: dock
id: dock/thunderbolt3-daisy-chain
user: root
flags: also-after-suspend
estimated_duration: 45.0
imports: from com.canonical.plainbox import manifest
requires: manifest.has_thunderbolt3 == 'True'
command: removable_storage_test.py -s 268400000 scsi
_summary: Daisy-chain testing for Thunderbolt 3 storage and display device
_description:
_purpose:
     This test will check if your system can support daisy-chaining of a storage
     and a monitor over Thunderbolt 3 port
 _steps:
     1. Connect your Thunderbolt monitor to your systems
     2. Connect and mount your Thunderbolt HDD to another Thunderbolt 3 port of the
        monitor (you can do this with HDD first as well)
     3. Click 'Test' to perform the storage test on the Thunderbolt HDD
 _verification:
     1. The verification for storage is automated, please select the result combine
        with the result for the display.
     2. Was the desktop displayed correctly on the Thunderbolt-connected screen?

### Hot Plug after suspend ###

id: dock/hot-plug-after-suspend
category_id: dock-hotplug
plugin: manual
depends: suspend/suspend_advanced_auto
estimated_duration: 30.00
_summary: Docking test
_purpose:
    This test will check the device can be used after docking and system suspend.
_steps:
    1. Unplug docking station.
    2. Replug in docking station.
_verification:
    Is the system working with problem (e.g. system hang) after docking station hot plugged in?

plugin: user-interact-verify
category_id: dock-hotplug
id: dock/hotplug-ethernet-after-suspend
depends: suspend/suspend_advanced_auto
command: network_check.py
estimated_duration: 10
_description:
 PURPOSE:
     This test will check wired connection after hotplug
 STEPS:
     1. Disable WiFi connection
     2. Click "Test" to verify that it's possible to establish a HTTP connection
 VERIFICATION:
     Did a notification show and was the connection correctly established?

plugin: user-interact
id: dock/hotplug-usb-insert-after-suspend
category_id: dock-hotplug
depends: dock/hot-plug-after-suspend
estimated_duration: 10.0
_summary: USB drive insertion after resuming
command: removable_storage_watcher.py insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB storage device plugged on the dock after suspend.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB storage device, preferably a HDD,
       in one of the dock's port.
       Although a USB pen drive may be used it might cause performance
       related tests to fail. (Note: this test will time-out after 20
       seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/hotplug-usb3-insert-after-suspend
category_id: dock-hotplug
depends: dock/hot-plug-after-suspend
estimated_duration: 10.0
_summary: USB3 drive insertion test
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3.0 storage device after dock hot plugged in.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3.0 storage device, preferably a HDD,
       in one of the dock's USB 3.0 port. Although a USB 3.0 pen drive may
       be used it might cause performance related tests to fail.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: shell
id: dock/hotplug-usb-storage-automated-after-suspend
category_id: dock-hotplug
depends: dock/hotplug-usb-insert-after-suspend
user: root
estimated_duration: 45.0
_summary: USB drive storage test after resuming
command: removable_storage_test.py -s 268400000 usb
_description:
 This test is automated and executes after the dock/usb-insert test is run.

plugin: shell
id: dock/hotplug-usb3-storage-automated-after-suspend
category_id: dock-hotplug
depends: dock/hotplug-usb3-insert-after-suspend
user: root
estimated_duration: 45.0
_summary: USB3 drive storage test
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the dock/usb3_insert test is run.

plugin: user-interact
id: dock/hotplug-usb-remove-after-suspend
category_id: dock-hotplug
depends: dock/hotplug-usb-insert-after-suspend
estimated_duration: 10.0
_summary: USB drive removal after resuming
command: removable_storage_watcher.py remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB storage device after suspend
_steps:
    1. Click "Test" and remove the USB device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/hotplug-usb3-remove-after-suspend
category_id: dock-hotplug
depends: dock/hotplug-usb3-insert-after-suspend
estimated_duration: 10.0
_summary: USB3 drive removal test
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB 3.0 storage device after dock hot plugged in
_steps:
    1. Click "Test" and remove the USB 3.0 device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

### Suspend, Undocked, Docked, Resume ###

id: dock/suspend-dock-resume
category_id: suspend-dock-resume
plugin: manual
estimated_duration: 120.00
_summary: Suspend the device, undock, dock it and resume it
_purpose:
    This test will check the device can be suspended, undocked, docked and resumed properly
_steps:
    1. Suspend the laptop (e.g. by closing its lid)
    2. Unplug docking station
    3. Plug in docking station 
    4. Resume the laptop (e.g. by pressing the Power button on the dock)
_verification:
    Is the device working as expected after being docked and resumed?

plugin: user-interact-verify
category_id: suspend-dock-resume
id: dock/ethernet-after-suspend-dock-resume
depends: dock/suspend-dock-resume
command: network_check.py
estimated_duration: 10
_description:
 PURPOSE:
     This test will check wired connection after suspend, undocked, docked, resume.
 STEPS:
     1. Disable WiFi connection
     2. Click "Test" to verify that it's possible to establish a HTTP connection
 VERIFICATION:
     Did a notification show and was the connection correctly established?

plugin: user-interact
id: dock/usb-insert-after-suspend-dock-resume
category_id: suspend-dock-resume
depends: dock/suspend-dock-resume
estimated_duration: 10.0
_summary: USB drive insertion after resuming
command: removable_storage_watcher.py insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB storage device plugged on the dock after suspend.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB storage device, preferably a HDD,
       in one of the dock's port.
       Although a USB pen drive may be used it might cause performance
       related tests to fail. (Note: this test will time-out after 20
       seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/usb3-insert-after-suspend-dock-resume
category_id: suspend-dock-resume
depends: dock/suspend-dock-resume
estimated_duration: 10.0
_summary: USB3 drive insertion test
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3.0 storage device after suspend, undocked, docked, resume.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3.0 storage device, preferably a HDD,
       in one of the dock's USB 3.0 port. Although a USB 3.0 pen drive may
       be used it might cause performance related tests to fail.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: shell
id: dock/usb-storage-automated-after-suspend-dock-resume
category_id: suspend-dock-resume
depends: dock/usb-insert-after-suspend-dock-resume
user: root
estimated_duration: 45.0
_summary: USB drive storage test after resuming
command: removable_storage_test.py -s 268400000 usb
_description:
 This test is automated and executes after the dock/usb-insert test is run.

plugin: shell
id: dock/usb3-storage-automated-after-suspend-dock-resume
category_id: suspend-dock-resume
depends: dock/usb3-insert-after-suspend-dock-resume
user: root
estimated_duration: 45.0
_summary: USB3 drive storage test
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the dock/usb3_insert test is run.

plugin: user-interact
id: dock/usb-remove-after-suspend-dock-resume
category_id: suspend-dock-resume
depends: dock/usb-insert-after-suspend-dock-resume
estimated_duration: 10.0
_summary: USB drive removal after resuming
command: removable_storage_watcher.py remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB storage device after suspend
_steps:
    1. Click "Test" and remove the USB device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

plugin: user-interact
id: dock/usb3-remove-after-suspend-dock-resume
category_id: suspend-dock-resume
depends: dock/usb3-insert-after-suspend-dock-resume
estimated_duration: 10.0
_summary: USB3 drive removal test
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB 3.0 storage device after suspend, undocked, docked, resume.
_steps:
    1. Click "Test" and remove the USB 3.0 device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.

id: dock/monitor-displayport-after-suspend-dock-resume
category_id: suspend-dock-resume
depends: dock/suspend-dock-resume
estimated_duration: 120.0
_summary: DisplayPort test on the dock
plugin: manual
_purpose:
    This test will check the DisplayPort(s) on the dock after suspend, undocked, docked, resume.
_steps:
    Skip this test if the dock does not have a DisplayPort.
    1. Connect a display (if not already connected) to the DisplayPort on the dock
    2. Repeat step 1 for each additional DisplayPorts, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/monitor-hdmi-after-suspend-dock-resume
category_id: suspend-dock-resume
depends: dock/suspend-dock-resume
estimated_duration: 120.0
_summary: HDMI port test on the dock
plugin: manual
_purpose:
    This test will check the HDMI port(s) on the dock after suspend, undocked, docked, resume.
_steps:
    Skip this test if the dock does not have a HDMI port.
    1. Connect a display (if not already connected) to the HDMI port on the dock
    2. Repeat step 1 for each additional HDMI port, if any
_verification:
    Was the desktop displayed correctly on both screens?

id: dock/mac-address-passthrough
category_id: dock
plugin: shell
user: root
command: mac_passthrough.py
_description: Check dock MAC address pass-through function, please make sure following items before running this test:
    1. Pass-through mac address is flashed in BIOS
    2. MAC address pass-through is enabled in BIOS settings
    3. Dock is connected

id: dock/all-init
category_id: dock
plugin: manual
estimated_duration: 300.00
_purpose:
    This test is to setup the initial status for all I/O ports on docking.
    Note:
        Try to meet the limitation in the spec of the dock.
        If there's no port as description below, you can just skip it.
_steps:
    1. If the laptop is currently undocked, dock it now.
    2. Connect a Ethernet cable to the docking station.
    3. Connect a DP monitor to the docking station.
    4. Connect a HDMI monitor to the docking station.
    5. Connect a Thunderbolt monitor to the docking station.
    6. Connect a Thunderbolt3 storage to the docking station.
    7. Connect a USB Type-C storage to the docking station.
    8. Connect a USB3.0 storage to the docking station.
    9. Connect a headset to the docking station.
_verification:
    Mark it Pass if you have connected all I/O ports as mentioned above.

id: dock/all-reboot
category_id: dock
plugin: manual
estimated_duration: 300.00
_purpose:
    This test is to check if the device is still working after reboot.
_steps:
    Reboot the system.
_verification:
    Mark it Pass if you have rebooted the system.

id: dock/all-hotplug
category_id: dock
plugin: manual
estimated_duration: 300.00
_purpose:
    This test is to check if the device is still working after hotplug.
_steps:
    1. Unplug the docking station.
    2. Wait for 30 seconds.
    3. Plug in the docking station.
_verification:
    Mark it Pass if you have hotplugged the docking station.

id: dock/all-suspend
category_id: dock
plugin: manual
estimated_duration: 300.00
_purpose:
    This test is to check if the device is still working after suspend.
_steps:
    1. Suspend the system.
    2. Wait for 30 seconds.
    3. Resume the system.
_verification:
    Mark it Pass if you have suspended and resumed the system.

id: dock/all-poweroff
category_id: dock
plugin: manual
estimated_duration: 300.00
_purpose:
    This test is to check if the device is still working after power-off.
_steps:
    1. Poweroff the system.
    2. Wait for 30 seconds.
    3. Poweron the system.
_verification:
    Mark it Pass if you have powered off and powered on the system.

id: dock/all-init-monitor-multi-head
category_id: dock-display
estimated_duration: 120.0
_summary: Dual monitors test while docked
plugin: manual
_purpose:
    This test is to verify that multi-monitor output works using the dock. You will need multiple external monitors to perform this test. Depends on the specification of the device to use 4K monitor or FHD monitor.
_steps:
    Skip this test if your video card or the dock do not support multiple monitors.
    1. If your dock provides more than one monitor outputs, connect multiple monitors.
    2. Open the "Displays" tool (open the dash and search for "Displays").
    3. Configure your output to provide one desktop across all the monitors.
    4. Open any application and drag its window from one monitor to the next.
_verification:
    Was the stretched desktop displayed correctly across all the screens?
_siblings:
    [{"id": "dock/all-reboot-monitor-multi-head"},
     {"id": "dock/all-hotplug-monitor-multi-head"},
     {"id": "dock/all-suspend-monitor-multi-head"},
     {"id": "dock/all-poweroff-monitor-multi-head"}]

id: dock/all-init-monitor-multi-head-audio-playback
category_id: dock-audio
requires:
    device.category == 'AUDIO'
    package.name in ['pulseaudio-utils', 'pipewire']
_summary: Multiple monitor audio test
plugin: user-interact-verify
estimated_duration: 60.0
command:
    if check_audio_daemon.sh ; then
        pipewire_utils.py through -m sink -c "speaker-test -c 2 -l 1 -t wav"
    else
        indexes=$(pacmd list-sinks | grep -e 'index' -e 'available' | grep -B 1 -e 'available: unknown' -e 'available: yes' | grep index | awk '{print $NF}')
        for index in $indexes
        do
                pacmd set-default-sink "$index"
                audio_settings.py store --file="$PLAINBOX_SESSION_SHARE"/dockaudio_settings
                pacmd set-sink-volume "$index" 65536
                speaker-test -c 2 -l 1 -t wav
                audio_settings.py restore --file="$PLAINBOX_SESSION_SHARE"/dockaudio_settings
        done
    fi
_purpose:
    This test is to check if every external monitor on the dock can play sound.
_steps:
    1. Launch the test to play sound on every monitor.
_verification:
    Does every external monitor can play sound?
    If no sound output, try:
        1. Go to Settings > Sound > Output > Test > Try Front Left and Front Right.
        2. Repeat Step 1 for each monitor.
_siblings:
    [{"id": "dock/all-reboot-monitor-multi-head-audio-playback"},
     {"id": "dock/all-hotplug-monitor-multi-head-audio-playback"},
     {"id": "dock/all-suspend-monitor-multi-head-audio-playback"},
     {"id": "dock/all-poweroff-monitor-multi-head-audio-playback"}]

id: dock/all-init-networking-gateway-ping
plugin: user-interact-verify
category_id: dock-network
imports: from com.canonical.plainbox import manifest
requires: manifest.has_ethernet_adapter == 'True'
depends: ethernet/detect
command: gateway_ping_test.py
estimated_duration: 10.00
_summary: Ping test using dock's Ethernet connectivity
_purpose:
    Tests whether the system has a working Internet connection.
_steps:
    1. Make sure the dock is connected to network using an Ethernet cable.
    2. Make sure the laptop itself is not connected to any Ethernet cable.
    3. Launch the test.
_verification:
    Was the test able to ping the network using the Ethernet connection?
_siblings:
    [{"id": "dock/all-reboot-networking-gateway-ping"},
     {"id": "dock/all-hotplug-networking-gateway-ping"},
     {"id": "dock/all-suspend-networking-gateway-ping"},
     {"id": "dock/all-poweroff-networking-gateway-ping"}]

id: dock/all-init-networking-ntp
category_id: dock-network
plugin: user-interact-verify
requires: package.name == 'ntpdate'
user: root
command: network_ntp_test.py
estimated_duration: 10.00
_summary: NTP sync test using dock's Ethernet connectivity
_purpose:
    Test to see if we can sync local clock to an NTP server
_steps:
    1. Make sure the dock is connected to network using an Ethernet cable.
    2. Make sure the laptop itself is not connected to any Ethernet cable.
    3. Launch the test.
_verification:
    Was the test able to synchronize system time using the Ethernet connection?
_siblings:
    [{"id": "dock/all-reboot-networking-ntp"},
     {"id": "dock/all-hotplug-networking-ntp"},
     {"id": "dock/all-suspend-networking-ntp"},
     {"id": "dock/all-poweroff-networking-ntp"}]

id: dock/all-init-thunderbolt3-insert
category_id: dock
estimated_duration: 40.0
plugin: user-interact
imports: from com.canonical.plainbox import manifest
requires: manifest.has_thunderbolt3 == 'True'
flags: also-after-suspend
command: removable_storage_watcher.py insert --timeout 40 scsi
_summary: Thunderbolt3 storage insertion detection
_purpose:
    This test will check if the connection of a Thunderbolt3 HDD to the dock could be detected
_steps:
    1. Click 'Test' to begin the test. This test will
       timeout and fail if the insertion has not been detected within 40 seconds.
    2. Plug a Thunderbolt3 HDD into an available Thunderbolt3 port on the dock.
       If it's not mounted automatically, please click the HDD icon to mount it.
_verification:
    The verification of this test is automated. Do not change the automatically
    selected result.
_siblings:
    [{"id": "dock/all-reboot-thunderbolt3-insert"},
     {"id": "dock/all-hotplug-thunderbolt3-insert"},
     {"id": "dock/all-suspend-thunderbolt3-insert"},
     {"id": "dock/all-poweroff-thunderbolt3-insert"}]

id: dock/all-init-thunderbolt3-storage-automated
category_id: dock
estimated_duration: 45.0
user: root
plugin: shell
depends: dock/all-init-thunderbolt3-insert
imports: from com.canonical.plainbox import manifest
requires: manifest.has_thunderbolt3 == 'True'
flags: also-after-suspend
command: removable_storage_test.py -s 268400000 scsi
_summary: Thunderbolt3 storage test
_description:
    This is an automated test which performs read/write operations on an attached
    Thunderbolt storage.
_siblings:
    [{"id": "dock/all-reboot-thunderbolt3-storage-automated",
      "depends": "dock/all-reboot-thunderbolt3-insert"},
     {"id": "dock/all-hotplug-thunderbolt3-storage-automated",
      "depends": "dock/all-hotplug-thunderbolt3-insert"},
     {"id": "dock/all-suspend-thunderbolt3-storage-automated",
      "depends": "dock/all-suspend-thunderbolt3-insert"},
     {"id": "dock/all-poweroff-thunderbolt3-storage-automated",
      "depends": "dock/all-poweroff-thunderbolt3-insert"}]

id: dock/all-init-thunderbolt3-remove
category_id: dock
estimated_duration: 20.0
plugin: user-interact
depends: dock/all-init-thunderbolt3-insert
imports: from com.canonical.plainbox import manifest
requires: manifest.has_thunderbolt3 == 'True'
flags: also-after-suspend
command: removable_storage_watcher.py remove scsi
_summary: Thunderbolt3 storage removal detection
_purpose:
    This test will check the system can detect the removal of a Thunderbolt3 storage.
_steps:
    1. Click 'Test' to begin the test. This test will timeout and fail if
       the removal has not been detected within 20 seconds.
    2. Remove the previously attached Thunderbolt3 HDD from the Thunderbolt3 port.
_verification:
    The verification of this test is automated. Do not change the automatically
    selected result
_siblings:
    [{"id": "dock/all-reboot-thunderbolt3-remove",
      "depends": "dock/all-reboot-thunderbolt3-insert"},
     {"id": "dock/all-hotplug-thunderbolt3-remove",
      "depends": "dock/all-hotplug-thunderbolt3-insert"},
     {"id": "dock/all-suspend-thunderbolt3-remove",
      "depends": "dock/all-suspend-thunderbolt3-insert"},
     {"id": "dock/all-poweroff-thunderbolt3-remove",
      "depends": "dock/all-poweroff-thunderbolt3-insert"}]


id: dock/all-init-usb-c/insert
plugin: user-interact
category_id: dock-usb
imports: from com.canonical.plainbox import manifest
requires:
    usb.usb3 == 'supported'
    manifest.has_usbc_data == 'True'
estimated_duration: 10.0
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3 storage device in a USB Type-C connector on the dock.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3 storage device in a USB Type-C port
       on the dock.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.
_siblings:
    [{"id": "dock/all-reboot-usb-c/insert"},
     {"id": "dock/all-hotplug-usb-c/insert"},
     {"id": "dock/all-suspend-usb-c/insert"},
     {"id": "dock/all-poweroff-usb-c/insert"}]

id: dock/all-init-usb-c/storage-automated
plugin: shell
category_id: dock-usb
imports: from com.canonical.plainbox import manifest
requires:
    usb.usb3 == 'supported'
    manifest.has_usbc_data == 'True'
depends: dock/all-init-usb-c/insert
user: root
estimated_duration: 45.0
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
    This test executes automatically after the usb-c/insert test is run.
_siblings:
    [{"id": "dock/all-reboot-usb-c/storage-automated",
      "depends": "dock/all-reboot-usb-c/insert"},
     {"id": "dock/all-hotplug-usb-c/storage-automated",
      "depends": "dock/all-hotplug-usb-c/insert"},
     {"id": "dock/all-suspend-usb-c/storage-automated",
      "depends": "dock/all-suspend-usb-c/insert"},
     {"id": "dock/all-poweroff-usb-c/storage-automated",
      "depends": "dock/all-poweroff-usb-c/insert"}]

id: dock/all-init-usb-c/remove
plugin: user-interact
category_id: dock-usb
imports: from com.canonical.plainbox import manifest
depends: dock/all-init-usb-c/insert
requires:
 usb.usb3 == 'supported'
 manifest.has_usbc_data == 'True'
estimated_duration: 10.0
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB 3 storage device connected to a USB Type-C port.
_steps:
    1. Click "Test" and remove the USB 3 device.
        (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.
_siblings:
    [{"id": "dock/all-reboot-usb-c/remove",
      "depends": "dock/all-reboot-usb-c/insert"},
     {"id": "dock/all-hotplug-usb-c/remove",
      "depends": "dock/all-hotplug-usb-c/insert"},
     {"id": "dock/all-suspend-usb-c/remove",
      "depends": "dock/all-suspend-usb-c/insert"},
     {"id": "dock/all-poweroff-usb-c/remove",
      "depends": "dock/all-poweroff-usb-c/insert"}]

plugin: user-interact
id: dock/all-init-usb3-insert
category_id: dock-usb
estimated_duration: 10.0
_summary: USB3 drive insertion test
command: removable_storage_watcher.py -m 500000000 insert usb
_purpose:
    This test will check that the system correctly detects the insertion of
    a USB 3.0 storage device.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Click "Test" and insert a USB 3.0 storage device, preferably a HDD,
       in one of the dock's USB 3.0 port. Although a USB 3.0 pen drive may
       be used it might cause performance related tests to fail.
       (Note: this test will time-out after 20 seconds.)
    2. Do not unplug the device after the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.
_siblings:
    [{"id": "dock/all-reboot-usb3-insert"},
     {"id": "dock/all-hotplug-usb3-insert"},
     {"id": "dock/all-suspend-usb3-insert"},
     {"id": "dock/all-poweroff-usb3-insert"}]

plugin: shell
id: dock/all-init-usb3-storage-automated
category_id: dock-usb
depends: dock/all-init-usb3-insert
user: root
estimated_duration: 45.0
_summary: USB3 drive storage test
command: removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_description:
 This test is automated and executes after the dock/usb3_insert test is run.
_siblings:
    [{"id": "dock/all-reboot-usb3-storage-automated",
      "depends": "dock/all-reboot-usb3-insert"},
     {"id": "dock/all-hotplug-usb3-storage-automated",
      "depends": "dock/all-hotplug-usb3-insert"},
     {"id": "dock/all-suspend-usb3-storage-automated",
      "depends": "dock/all-suspend-usb3-insert"},
     {"id": "dock/all-poweroff-usb3-storage-automated",
      "depends": "dock/all-poweroff-usb3-insert"}]

plugin: user-interact
id: dock/all-init-usb3-remove
category_id: dock-usb
depends: dock/all-init-usb3-insert
estimated_duration: 10.0
_summary: USB3 drive removal test
command: removable_storage_watcher.py -m 500000000 remove usb
_purpose:
    This test will check that the system correctly detects the removal of
    a USB 3.0 storage device
_steps:
    1. Click "Test" and remove the USB 3.0 device from the dock.
       (Note: this test will time-out after 20 seconds.)
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.
_siblings:
    [{"id": "dock/all-reboot-usb3-remove",
      "depends": "dock/all-reboot-usb3-insert"},
     {"id": "dock/all-hotplug-usb3-remove",
      "depends": "dock/all-hotplug-usb3-insert"},
     {"id": "dock/all-suspend-usb3-remove",
      "depends": "dock/all-suspend-usb3-insert"},
     {"id": "dock/all-poweroff-usb3-remove",
      "depends": "dock/all-poweroff-usb3-insert"}]

id: dock/all-init-audio-speaker-headphone-plug-detection
category_id: dock-audio
plugin: user-interact
estimated_duration: 60.0
_summary: Headphones recognized when plugged to the dock test
requires:
 device.category == 'AUDIO'
 package.name in ['pulseaudio-utils', 'pipewire']
command:
  if check_audio_daemon.sh ; then
    pipewire_utils.py monitor -t 30 -m sinks
  else
    pulse_active_port_change.py sinks
  fi
_purpose:
    Check that system detects speakers or headphones being plugged in.
    (Skip this test if the dock does not have headphones connector)
_steps:
    1. Prepare a pair of headphones or speakers with a standard 3.5mm jack.
    2. Locate the speaker / headphone jack on the dock under test.
    3. Run the test (you have 30 seconds from now on).
    4. Plug headphones or speakers into the appropriate jack.
    5. Unplug the device for subsequent tests.
_verification:
    Verification is automatic, no action is required.
    The test times out after 30 seconds (and fails in that case).
_siblings:
    [{"id": "dock/all-reboot-audio-speaker-headphone-plug-detection"},
     {"id": "dock/all-hotplug-audio-speaker-headphone-plug-detection"},
     {"id": "dock/all-suspend-audio-speaker-headphone-plug-detection"},
     {"id": "dock/all-poweroff-audio-speaker-headphone-plug-detection"}]

id: dock/all-init-audio-playback-headphones
category_id: dock-audio
plugin: user-interact-verify
flags: also-after-suspend
estimated_duration: 30.0
_summary: Headphones output test
depends: dock/all-init-audio-speaker-headphone-plug-detection
requires:
    device.category == 'AUDIO'
    package.name == 'alsa-base'
    package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
    package.name in ['pulseaudio-utils', 'pipewire']
command:
  if check_audio_daemon.sh ; then
    pipewire_utils.py show -t audio
    pipewire_utils.py gst -t 2 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
    EXIT_CODE=$?
  else
    audio_settings.py store --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
    audio_settings.py set --device=pci --volume=50
    gst_pipeline_test.py -t 2 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'
    EXIT_CODE=$?
    audio_settings.py restore --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
  fi
  exit $EXIT_CODE
_purpose:
    This test will check that headphones connector works correctly.
    (Skip this test if there is no headphone connector on the dock)
_steps:
    1. Connect a pair of headphones to the dock.
    2. Go to the Sound settings and make sure the correct Output is selected.
    3. Click the Test button to play a sound to your audio device.
_verification:
    Did you hear a sound through the headphones and did the sound play without any distortion, clicks or other strange noises from your headphones?
_siblings:
    [{"id": "dock/all-reboot-audio-playback-headphones",
      "depends": "dock/all-reboot-audio-speaker-headphone-plug-detection"},
     {"id": "dock/all-hotplug-audio-playback-headphones",
      "depends": "dock/all-hotplug-audio-speaker-headphone-plug-detection"},
     {"id": "dock/all-suspend-audio-playback-headphones",
      "depends": "dock/all-suspend-audio-speaker-headphone-plug-detection"},
     {"id": "dock/all-poweroff-audio-playback-headphones",
      "depends": "dock/all-poweroff-audio-speaker-headphone-plug-detection"}]

id: dock/all-init-audio-microphone-plug-detection
category_id: dock-audio
plugin: user-interact
estimated_duration: 60.0
_summary: Microphone recognized when plugged to the dock test
requires:
 device.category == 'AUDIO'
 package.name in ['pulseaudio-utils', 'pipewire']
command:
  if check_audio_daemon.sh ; then
    pipewire_utils.py monitor -t 30 -m sources
  else
    pulse_active_port_change.py sources
  fi
_purpose:
    Check that system detects a microphone being plugged in.
    (Skip this test if the dock does not have a microphone connector)
_steps:
    1. Prepare a microphone with a standard 3.5mm jack.
    2. Locate the microphone jack on the dock under test.
       Keep in mind that it may be shared with the headphone jack.
    3. Run the test (you have 30 seconds from now on)
    4. Plug the microphone into the appropriate jack.
    5. Unplug the device for subsequent tests.
_verification:
    Verification is automatic, no action is required.
    The test times out after 30 seconds (and fails in that case).
_siblings:
    [{"id": "dock/all-reboot-audio-microphone-plug-detection"},
     {"id": "dock/all-hotplug-audio-microphone-plug-detection"},
     {"id": "dock/all-suspend-audio-microphone-plug-detection"},
     {"id": "dock/all-poweroff-audio-microphone-plug-detection"}]

plugin: user-interact-verify
category_id: dock-audio
id: dock/all-init-audio-alsa-record-playback-external
estimated_duration: 30.0
flags: also-after-suspend
_summary: External microphone plugged to the dock to record sound test
depends: dock/all-init-audio-microphone-plug-detection
requires:
    device.category == 'AUDIO'
    package.name == 'alsa-base'
    package.name == 'gstreamer1.0-plugins-good' or package.name == 'gstreamer0.10-plugins-good'
    package.name in ['pulseaudio-utils', 'pipewire']
command:
  if check_audio_daemon.sh ; then
    pipewire_utils.py show -t audio
    alsa_record_playback.sh
    EXIT_CODE=$?
  else
    audio_settings.py store --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
    audio_settings.py set --device=pci --volume=50
    alsa_record_playback.sh
    EXIT_CODE=$?
    audio_settings.py restore --file="$PLAINBOX_SESSION_SHARE"/pulseaudio_settings
  fi
  exit $EXIT_CODE
_purpose:
    This test will check that recording sound using an external microphone works correctly.
    (Skip this test if the dock does not have a microphone connector)
_steps:
    1. Connect a microphone to the dock's microphone port.
    2. Go to the Sound settings and make sure the correct Output is selected.
    3. Click "Test", then speak into the external microphone.
    4. After a few seconds, your speech will be played back to you.
_verification:
    Did you hear your speech played back?
_siblings:
    [{"id": "dock/all-reboot-audio-alsa-record-playback-external",
      "depends": "dock/all-reboot-audio-microphone-plug-detection"},
     {"id": "dock/all-hotplug-audio-alsa-record-playback-external",
      "depends": "dock/all-hotplug-audio-microphone-plug-detection"},
     {"id": "dock/all-suspend-audio-alsa-record-playback-external",
      "depends": "dock/all-suspend-audio-microphone-plug-detection"},
     {"id": "dock/all-poweroff-audio-alsa-record-playback-external",
      "depends": "dock/all-poweroff-audio-microphone-plug-detection"}]
