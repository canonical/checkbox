unit: template
template-resource: graphics_card
template-filter: graphics_card.prime_gpu_offload == 'Off'
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_driver_version_{product_slug}
command:
 # shellcheck disable=SC1091
 source graphics_env.sh {driver} {index}
 if [[ $XDG_SESSION_TYPE == "wayland" ]]
 then
   inxi_snapshot -Gazy
 else
   graphics_driver.py
 fi
estimated_duration: 0.5
_description: Parses Xorg.0.log and discovers the running X driver and version for the {vendor} {product} graphics card
_summary: Test X driver/version for {vendor} {product}

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/xorg-process
requires:
 package.name == 'xorg'
 package.name == 'procps'
command: pgrep -a -f '/usr/lib/xorg/Xorg'
estimated_duration: 0.100
_description: Test that the X process is running.
_summary: Test that the X process is running.

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/xorg-version
requires: package.name == "x11-utils"
depends: graphics/xorg-process
command: set -o pipefail; xdpyinfo | grep "^X.Org version" | cut -d ':' -f 2 | tr -d ' '
estimated_duration: 0.018
_description: Test to output the Xorg version
_summary: Test Xorg version

unit: template
template-resource: graphics_card
plugin: manual
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_resolution-change_{product_slug}
_summary: Test changing resolution for {vendor} {product}
_description:
 PURPOSE:
     This test will verify that the GUI is usable after manually changing resolution on the {vendor} {product} graphics card.
 STEPS:
     1. Select the {vendor} {product} graphics card (a reboot may be necessary)
     2. Open the Displays application
     3. Select a new resolution from the dropdown list
     4. Click on Apply
     5. Select the original resolution from the dropdown list
     6. Click on Apply
 VERIFICATION:
     Did the resolution on the {vendor} {product} graphics card change as expected?

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/xorg-failsafe
requires: package.name == 'xorg'
command: ! test -e /var/log/Xorg.failsafe.log
estimated_duration: 0.030
_description: Test that the X is not running in failsafe mode.
_summary: Test that X is not in failsafe mode.

unit: template
template-resource: graphics_card
plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_resolution_{product_slug}
requires:
 device.category == 'VIDEO'
command: resolution_test.py
estimated_duration: 10.00
_summary: Test default resolution for {vendor} {product}
_description:
 PURPOSE:
     This test will verify the default display resolution on the {vendor} {product} graphics card.
 STEPS:
     1. Click "Test".
     2. Confirm that the resolution shown is acceptable for your display.
 VERIFICATION:
     Is the resolution shown acceptable for your display on {vendor} {product} graphics card?

unit: template
template-resource: graphics_card
plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_screen_resolution_{product_slug}
requires:
 device.category == 'VIDEO'
 executable.name == 'qmlscene'
command: qmlscene -qt5 --transparent --fullscreen "$PLAINBOX_PROVIDER_DATA"/resolution_test.qml
estimated_duration: 10.0
_summary: Test default resolution for {vendor} {product}
_description:
 PURPOSE:
     This test will verify the default display resolution on the {vendor} {product} graphics card
 STEPS:
     1. Click on Test to display the screen resolution overlay for 5 seconds.
 VERIFICATION:
     Is this acceptable for your display on the {vendor} {product} graphics card?

unit: template
template-resource: graphics_card
template-filter: graphics_card.prime_gpu_offload == 'Off'
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_minimum_resolution_{product_slug}
requires:
 device.category == 'VIDEO'
command:
 # shellcheck disable=SC1091
 source graphics_env.sh {driver} {index}
 resolution_test.py --horizontal 800 --vertical 600
estimated_duration: 0.331
_summary: Test that {vendor} {product} meets minimum resolution requirement
_description:
 Ensure the current resolution meets or exceeds the recommended minimum
 resolution (800x600) on the {vendor} {product} graphics card. See here for details:
 https://help.ubuntu.com/community/Installation/SystemRequirements

unit: template
template-resource: graphics_card
template-filter: graphics_card.prime_gpu_offload == 'Off'
id: graphics/{index}_maximum_resolution_{product_slug}
flags: also-after-suspend
plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
requires:
 device.category == 'VIDEO'
command:
   graphics_max_resolution.py
estimated_duration: 10.0
_summary: Test maximum supported resolution for {vendor} {product}
_description:
 PURPOSE:
   This test will verify the maximum supported resolution on the {vendor} {product} graphics card.
 STEPS:
   1. Select the {vendor} {product} graphics card (a reboot may be necessary)
   2. Consult the system's specifications and locate the screen's maximum supported resolution.
   3. Click on Test to display the maximum resolution that can be used by Ubuntu on the current display.
 VERIFICATION:
   Is this the maximum resolution for the display connected to the {vendor} {product} graphics card?

unit: template
template-resource: graphics_card
id: graphics/{index}_color_depth_{product_slug}
plugin: shell
category_id: com.canonical.plainbox::graphics
command: color_depth_info.py
estimated_duration: 0.150
_description: Collect info on color depth and pixel format for {vendor} {product}
_summary: Test color depth info for {vendor} {product}

unit: template
template-resource: graphics_card
id: graphics/{index}_fresh_rate_{product_slug}
plugin: shell
category_id: com.canonical.plainbox::graphics
command: fresh_rate_info.py
_description: Collect info on fresh rate for {vendor} {product}.
_summary: Test refresh rate for {vendor} {product}

unit: template
template-resource: graphics_card
id: graphics/{index}_graphic_memory_{product_slug}
plugin: shell
category_id: com.canonical.plainbox::graphics
command: graphic_memory_info.py
_description: Collect info on graphic memory for {vendor} {product}.
_summary: Test graphic memory info for {vendor} {product}.

unit: template
template-resource: graphics_card
id: graphics/{index}_video_{product_slug}
flags: also-after-suspend
plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
requires:
 package.name == 'xorg'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
command:
 # shellcheck disable=SC1091
 source graphics_env.sh {driver} {index}
 gst_pipeline_test.py -t 2 'videotestsrc ! videoconvert ! autovideosink' || gst_pipeline_test.py -t 2 'videotestsrc ! ffmpegcolorspace ! autovideosink'
_summary: Test that video can be displayed with {vendor} {product}
_description:
 PURPOSE:
     This test will test the default display with a sample video
 STEPS:
     1. Click "Test" to display a video test.
 VERIFICATION:
     Do you see color bars and static?

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/VESA_drivers_not_in_use
command: cat /var/log/Xorg.0.log ~/.local/share/xorg/Xorg.0.log 2>&1 | perl -e '$a=0;while(<>){$a++ if /Loading.*vesa_drv\.so/;$a-- if /Unloading.*vesa/&&$a}exit 1 if $a'
estimated_duration: 0.011
_description: Check that VESA drivers are not in use
_summary: Test that VESA drivers are not in use

unit: template
template-resource: graphics_card
template-filter: graphics_card.prime_gpu_offload == 'Off'
plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_cycle_resolution_{product_slug}
flags: also-after-suspend
requires: package.name == 'xorg'
depends: graphics/VESA_drivers_not_in_use
command:
 # shellcheck disable=SC1091
 source graphics_env.sh {driver} {index}
 if [[ $XDG_SESSION_TYPE == "wayland" ]]
 then
   gnome_randr_cycle.py --screenshot-dir="$PLAINBOX_SESSION_SHARE"
 else
   xrandr_cycle.py --screenshot-dir="$PLAINBOX_SESSION_SHARE"
 fi
estimated_duration: 250.000
_summary: Test resolution cycling for {vendor} {product}
_description:
 PURPOSE:
     This test cycles through the detected video modes for the {vendor} {product} graphics card
 STEPS:
     1. Click "Test" to start cycling through the video modes
 VERIFICATION:
     Did the screen appear to be working for each mode?

unit: template
template-resource: graphics_card
template-filter: graphics_card.prime_gpu_offload == 'Off'
plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_rotation_{product_slug}
flags: also-after-suspend
command:
 # shellcheck disable=SC1091
 source graphics_env.sh {driver} {index}
 rotation_test.py
estimated_duration: 20.000
_summary: Test rotation for {vendor} {product}
_description:
 PURPOSE:
     This test will test display rotation on the {vendor} {product} graphics card
 STEPS:
     1. Click "Test" to test display rotation. The display will be rotated every 4 seconds.
     2. Check if all rotations (normal right inverted left) took place without permanent screen corruption
 VERIFICATION:
     Did the display rotation take place without permanent screen corruption?

unit: template
template-resource: graphics_card
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_gl_support_{product_slug}
command:
  "$CHECKBOX_RUNTIME"/usr/lib/nux/unity_support_test -p 2>&1
estimated_duration: 0.131
_description: Check that {vendor} {product} hardware is able to run a desktop session (OpenGL)
_summary: Test OpenGL support for {vendor} {product}
user: root


unit: template
template-resource: graphics_card
template-filter: graphics_card.driver in ['amdgpu', 'amdgpu-pro']
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_valid_opengl_renderer_{product_slug}
requires: executable.name == 'glxinfo'
command:
 renderer=$(DRI_PRIME=1 glxinfo | grep "OpenGL re")
 echo "$renderer"
 if grep -qi 'Intel' <<<"$renderer"; then
     echo 'ERROR: renderer is Intel when DRI_PRIME=1'
     exit 1
 fi
_summary: Check the OpenGL renderer (AMD GPU and DRI_PRIME=1)

unit: template
template-resource: graphics_card
plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_glxgears_{product_slug}
flags: also-after-suspend
requires: executable.name == 'glxgears'
command:
 # shellcheck disable=SC1091
 source graphics_env.sh {driver} {index}
 glxgears
 true
_summary: Test that glxgears works for {vendor} {product}
_description:
 PURPOSE:
     This test tests the basic 3D capabilities of your {vendor} {product} video card
 STEPS:
     1. Click "Test" to execute an OpenGL demo. Press ESC at any time to close.
     2. Verify that the animation is not jerky or slow.
 VERIFICATION:
     1. Did the 3d animation appear?
     2. Was the animation free from slowness/jerkiness?

unit: template
template-resource: graphics_card
plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_glxgears_fullscreen_{product_slug}
flags: also-after-suspend
requires: executable.name == 'glxgears'
command:
 # shellcheck disable=SC1091
 source graphics_env.sh {driver} {index}
 glxgears -fullscreen
 true
_summary: Test that glxgears works on fullscreen for {vendor} {product}
_description:
 PURPOSE:
     This test tests the basic fullscreen 3D capabilities of your {vendor} {product} video card
 STEPS:
     1. Click "Test" to execute an OpenGL demo. Press ESC at any time to close.
     2. Verify that the animation is not jerky or slow.
 VERIFICATION:
     1. Did the 3d animation appear?
     2. Was the animation free from slowness/jerkiness?

unit: template
template-resource: graphics_card
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_3d_window_open_close_{product_slug}
requires: executable.name == 'glxgears'
command: window_test.py -t open-close -i 10
estimated_duration: 60.525
_description: Open and close a 3D window multiple times on the {vendor} {product} video card
_summary: Test 3D window open/close for {vendor} {product}

unit: template
template-resource: graphics_card
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_3d_window_suspend_resume_{product_slug}
requires: executable.name == 'glxgears'
command: window_test.py -t suspend-resume -i 10
estimated_duration: 121.00
_description: Open, suspend resume and close a 3D window multiple times on the {vendor} {product} video card
_summary: Test a 3D window with suspend/resume for {vendor} {product}

unit: template
template-resource: graphics_card
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_multi_3d_windows_open_close_{product_slug}
requires: executable.name == 'glxgears'
command: window_test.py -t open-close-multi -i 10 -w 4
estimated_duration: 60.000
_description: Open and close 4 3D windows multiple times on the {vendor} {product} video card
_summary: Test Multi 3D window open/close for {vendor} {product}

unit: template
template-resource: graphics_card
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_3d_window_move_{product_slug}
requires:
 executable.name == 'glxgears'
 executable.name == 'wmctrl'
command: window_test.py -t move
estimated_duration: 50.000
_description: Move a 3D window around the screen on the {vendor} {product} video card
_summary: Test 3D window movement for {vendor} {product}

unit: template
template-resource: graphics_card
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_screenshot_{product_slug}
requires: package.name == 'fswebcam'
command: set -o pipefail; camera_test.py still --device=/dev/external_webcam -f "$PLAINBOX_SESSION_SHARE"/screenshot_{index}.jpg -q 2>&1 | ansi_parser.py
_summary: Test grabbing a screenshot for {vendor} {product}
_description:
 PURPOSE:
     Take a screengrab of the current screen (logged on Unity desktop) as produced by the {vendor} {product} graphics card
 STEPS:
     1. Take picture using USB webcam
 VERIFICATION:
     Review attachment manually later

unit: template
template-resource: graphics_card
plugin: attachment
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_screenshot_{product_slug}.jpg
depends: graphics/{index}_screenshot_{product_slug}
command: cat "$PLAINBOX_SESSION_SHARE"/screenshot_{index}.jpg
_description: Attaches the screenshot captured in graphics/screenshot for the {vendor} {product} graphics card.
_summary: Attach results of screenshot test for {vendor} {product}

unit: template
template-resource: graphics_card
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_screenshot_fullscreen_video_{product_slug}
requires: package.name == 'fswebcam'
command:
 [ -f "$PLAINBOX_PROVIDER_DATA"/video/Ogg_Theora_Video.ogv ] || {{ echo "Video file not found"; exit 1; }}
 gsettings set org.gnome.totem repeat true
 totem --fullscreen "$PLAINBOX_PROVIDER_DATA"/video/Ogg_Theora_Video.ogv 2>/dev/null &
 set -o pipefail
 sleep 15 && camera_test.py still --device=/dev/external_webcam -f "$PLAINBOX_SESSION_SHARE"/screenshot_fullscreen_video_{index}.jpg -q 2>&1 | ansi_parser.py
 sleep 5 && pkill totem
 gsettings set org.gnome.totem repeat false
_summary: Test FSV screenshot for {vendor} {product}
_description:
 PURPOSE:
     Take a screengrab of the current screen during fullscreen video playback using the {vendor} {product} graphics card
 STEPS:
     1. Start a fullscreen video playback
     2. Take picture using USB webcam after a few seconds
 VERIFICATION:
     Review attachment manually later

unit: template
template-resource: graphics_card
plugin: manual
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_switch_card_{product_slug}
_summary: Test GPU switching for {vendor} {product}
_description:
_purpose:
     Manually switch to the {vendor} {product} card.
_steps:
     Note: If your system is already running with the {vendor} {product} card, then please mark this test as "passed" and proceed.
     .
     1. Using the appropriate tool (either NVidia settings or AMD Control Center), switch your system to use the {vendor} {product} graphics card. This will require restarting your session.
     2. Once the session restarts, please restart this testing program and select "continue" when prompted for a resume action.
     3. Don't answer the verification question until the system has restarted with the {vendor} {product} card enabled.
_verification:
     Is the system using the {vendor} {product} card now?

unit: template
template-resource: graphics_card
template-filter: graphics_card.prime_gpu_offload == 'Off'
plugin: manual
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_switch_card_{product_slug}_xenial
requires:
 graphics_card.driver in ['nouveau', 'nvidia', 'amdgpu-pro', 'pcieport']
 lsb.codename == 'xenial'
_summary: Test GPU switching for {vendor} {product}
_description:
_purpose:
     Manually switch to the {vendor} {product} card.
_steps:
     Note: If your system is already running with the {vendor} {product} card, then please mark this test as "passed" and proceed.
     .
     1. Using the appropriate tool (e.g. NVidia settings, amdgpu-pro-px), switch your system to use the {vendor} {product} graphics card. This will require restarting your session.
     If using amdgpu-pro drivers, use the following command to switch to:
         - integrated GPU: sudo /opt/amdgpu-pro/bin/amdgpu-pro-px --mode powersaving
         - discrete GPU: sudo /opt/amdgpu-pro/bin/amdgpu-pro-px --mode performance
     2. Once the session restarts, please restart this testing program and select "continue" when prompted for a resume action.
     3. Don't answer the verification question until the system has restarted with the {vendor} {product} card enabled.
_verification:
     Is the system using the {vendor} {product} card now?

unit: template
template-resource: graphics_card
plugin: attachment
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_screenshot_fullscreen_video_{product_slug}.jpg
depends: graphics/{index}_screenshot_fullscreen_video_{product_slug}
command: cat "$PLAINBOX_SESSION_SHARE"/screenshot_fullscreen_video_{index}.jpg
_summary: Attach results of FSV screenshot test for {vendor} {product}
_description: Attaches the screenshot captured in graphics/screenshot_fullscreen_video for the {vendor} {product} graphics card

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/screen-capture-internal
_summary: Obtains a simple screen capture
estimated_duration: 1.0
requires: package.name == 'gnome-screenshot'
command: gnome-screenshot --file "${PLAINBOX_SESSION_SHARE}"/screen-capture.png
_description: Obtains a simple screen capture using gnome-screenshot if present

plugin: attachment
category_id: com.canonical.plainbox::graphics
id: screen-capture-internal.png
_summary: Attaches a simple screen capture
estimated_duration: 1.0
depends: graphics/screen-capture-internal
command: [ -f "${PLAINBOX_SESSION_SHARE}"/screen-capture.png ] && cat "${PLAINBOX_SESSION_SHARE}"/screen-capture.png
_description: Attaches the simple screen capture file

unit: template
template-resource: graphics_card
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_screen-capture-internal_{product_slug}
_summary: Obtains a simple screen capture of {vendor} {product}
estimated_duration: 1.0
requires: package.name == 'gnome-screenshot'
command: gnome-screenshot --file "$PLAINBOX_SESSION_SHARE"/screen-capture-{index}.png
_description: Obtains a simple screen capture of {vendor} {product} using gnome-screenshot if present

unit: template
template-resource: graphics_card
plugin: attachment
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_screen-capture-internal_{product_slug}.png
depends: graphics/{index}_screen-capture-internal_{product_slug}
_summary: Attaches a simple screen capture of {vendor} {product}
estimated_duration: 1.0
command: [ -f "$PLAINBOX_SESSION_SHARE"/screen-capture-{index}.png ] && cat "$PLAINBOX_SESSION_SHARE"/screen-capture-{index}.png
_description: Attaches the simple screen capture file of {vendor} {product}

unit: template
template-resource: graphics_card
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_auto_switch_card_{product_slug}
requires:
 graphics_card.driver in ['nvidia', 'amdgpu-pro', 'pcieport']
_summary: Switch GPU to {vendor} {product} and reboot
_purpose:
 Switch GPU to {vendor} {product} and reboot the machine
plugin: shell
user: root
command:
 {switch_to_cmd}
 pm_test.py --silent --checkbox-respawn-cmd "$PLAINBOX_SESSION_SHARE"/__respawn_checkbox reboot --log-level=debug --log-dir="$PLAINBOX_SESSION_SHARE"
flags: noreturn preserve-locale also-after-suspend

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/nvlink-status-check
requires:
 dmi.product in ['Desktop','Low Profile Desktop','Tower','Mini Tower', 'Space-saving']
 graphics_card.driver == 'nvidia'
command: nvidia_nvlink_check.sh
_summary: Check NVIDIA NVLINK status
_description: Check NVLINK are supported and NVLINK are connected properly on system, please make sure below items before testing:
    1. More than one NVIDIA Graphic card are installed.
    2. Each graphic card are connected by NVLINK.

unit: template
template-resource: graphics_card
plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/{index}_glmark2-es2_{product_slug}
requires:
 executable.name == 'glmark2-es2'
 'classic' in environment.SNAP_NAME
command: glmark2-es2 --data-path "$CHECKBOX_RUNTIME"/usr/share/glmark2/
estimated_duration: 60.5
_summary: Run OpenGL ES 2.0 X11 benchmark on the {product} video card