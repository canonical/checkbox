plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/driver_version
command:
 if [[ $XDG_SESSION_TYPE == "wayland" ]]
 then
   inxi_snapshot -Gazy
 else
   graphics_driver.py
 fi
estimated_duration: 0.500
_purpose: Parses Xorg.0.log and discovers the running X driver and version
_summary: Test X driver/version

plugin: manual
category_id: com.canonical.plainbox::graphics
id: graphics/resolution-change
depends: graphics/xorg-version
_summary: Test changing resolution
_purpose:
    This test will verify that the GUI is usable after manually changing resolution
_steps:
    1. Open the Displays application
    2. Select a new resolution from the dropdown list
    3. Click on Apply
    4. Select the original resolution from the dropdown list
    5. Click on Apply
_verification:
    Did the resolution change as expected?

plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/resolution
requires:
 device.category == 'VIDEO'
flags: deprecated
command: resolution_test.py
estimated_duration: 0.750
_summary: Test default resolution (for old checkbox)
_purpose:
 This test will verify the default display resolution
_steps:
 1. This display is using the following resolution:
 INFO:
     $output
_verification:
 Is this acceptable for your display?

plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/screen-resolution
requires:
 device.category == 'VIDEO'
 executable.name == 'qmlscene'
command: qmlscene -qt5 --transparent --fullscreen "$PLAINBOX_PROVIDER_DATA"/resolution_test.qml
estimated_duration: 10.0
_summary: Test default resolution
_description:
_purpose:
 This test will verify the default display resolution
_steps:
 1. Click on Test to display the screen resolution overlay for 5 seconds.
_verification:
 Is this acceptable for your display?

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/minimum_resolution
requires:
 device.category == 'VIDEO'
command: resolution_test.py --horizontal 800 --vertical 600
estimated_duration: 0.331
_summary: Test that system meets minimum resolution requirement
_purpose: 
 Ensure the current resolution meets or exceeds the recommended minimum
 resolution (800x600). See here for details:
 .
 https://help.ubuntu.com/community/Installation/SystemRequirements

plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/maximum_resolution
requires:
 device.category == 'VIDEO'
command: echo "Maximum resolution: $(xrandr -q |grep -A 1 "connected\( primary\)* [0-9]" |tail -1 |awk '{print $1}')"
estimated_duration: 10
_summary: Test maximum supported resolution
_purpose:
    This test will verify the display is operating at its maximum supported resolution
_steps:
    1. Consult the system's specifications and locate the screen's maximum supported resolution.
    2. Click on "Test" to display the maximum resolution that can be used by Ubuntu on the current display.
_verification:
    Is this the display's maximum resolution?

id: graphics/color_depth
plugin: shell
category_id: com.canonical.plainbox::graphics
command: color_depth_info.py
estimated_duration: 0.150
_description: Collect info on color depth and pixel format.
_summary: Collect info on color depth and pixel format.

id: graphics/fresh_rate
plugin: shell
category_id: com.canonical.plainbox::graphics
command: fresh_rate_info.py
_purpose: Collect info on fresh rate.
_summary: Collect info on fresh rate.

id: graphics/graphic_memory
plugin: shell
category_id: com.canonical.plainbox::graphics
command: graphic_memory_info.py
_description: Collect info on graphic memory.
_summary: Collect info on graphic memory.

plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/cycle_resolution
requires: package.name == 'xorg'
depends: graphics/VESA_drivers_not_in_use
command: xrandr_cycle.py --screenshot-dir "$PLAINBOX_SESSION_SHARE"
estimated_duration: 250.000
_summary: Test resolution cycling
_purpose:
 This test cycles through the detected video modes
_steps:
 1. Click "Test" to start cycling through the video modes
_verification:
 Did the screen appear to be working for each mode?

plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/rotation
depends: graphics/xorg-version
command: rotation_test.py
estimated_duration: 20.000
_summary: Test rotation
_description:
_purpose:
 This test will test display rotation
_steps:
 1. Click "Test" to test display rotation. The display will be rotated every 4 seconds.
 2. Check if all rotations (normal right inverted left) took place without permanent screen corruption
_verification:
 Did the display rotation take place without permanent screen corruption?

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/gl_support
requires: package.name == 'nux-tools'
command: /usr/lib/nux/unity_support_test -p 2>&1
estimated_duration: 0.131
_purpose: Check that hardware is able to run a desktop session (OpenGL)
_summary: Test OpenGL support

plugin: user-interact-verify
category_id: com.canonical.plainbox::graphics
id: graphics/glxgears
requires: executable.name == 'glxgears'
command: glxgears; true
_summary: Test that glxgears works
_purpose:
 This test tests the basic 3D capabilities of your video card
_steps:
 1. Click "Test" to execute an OpenGL demo. Press ESC at any time to close.
 2. Verify that the animation is not jerky or slow.
_verification:
 1. Did the 3D animation appear?
 2. Was the animation free from slowness/jerkiness?

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/3d_window_open_close
requires: executable.name == 'glxgears'
command: window_test.py -t open-close -i 10
estimated_duration: 60.525
_summary: Test 3D window open/close
_purpose: Open and close a 3D window multiple times

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/3d_window_suspend_resume
requires: executable.name == 'glxgears'
command: window_test.py -t suspend-resume -i 10
estimated_duration: 121.00
_purpose: Open, suspend, resume, and close a 3D window multiple times
_summary: Test a 3D window with suspend/resume

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/multi_3d_windows_open_close
requires: executable.name == 'glxgears'
command: window_test.py -t open-close-multi -i 10 -w 4
estimated_duration: 60.000
_purpose: Open and close 4 3D windows multiple times
_summary: Test Multi 3D window open/close

plugin: shell
category_id: com.canonical.plainbox::graphics
id: graphics/3d_window_move
requires: executable.name == 'glxgears'
command: window_test.py -t move
estimated_duration: 50.000
_purpose: Move a 3D window around the screen
_summary: Test 3D window movement
