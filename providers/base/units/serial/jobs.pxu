id: serial/rs232-console
_summary: Serial debugging console is enabled and operational
_purpose:
 Check if the user can log in through the serial port on the test machine (DUT)
_steps:
 1. Connect USB to DB9 null modem adapter cable to the serial port of the DUT.
 2. Connect the cable to a USB port of another Ubuntu machine (client).
 3. Install screen on the client (if the "screen" command doesn't exist).
 4. Execute the following command on the client:
  sudo screen /dev/ttyUSB0
 5. Check if a serial-getty service is already running on the test machine
  systemctl list-units --type service | grep serial-getty
  If not, start the serial-getty service on the test machine for the desired rs232 device. For example:
  sudo systemctl start serial-getty@ttyS0.service
 6. Log into the test machine from the terminal on the client.
_verification:
 1. The output in the client's terminal looks fine after the serial-getty service has started.
 2. The client can successfully log into the DUT.
plugin: manual
flags: also-after-suspend
category_id: serial
estimated_duration: 600

unit: template
template-resource: serial_ports_static
template-unit: job
id: serial/loopback-{dev}
template-id: serial/loopback-dev
_summary: Serial loopback test of {dev}
_purpose: Check if serial port is working hardwired
plugin: shell
user: root
command: serial_loopback.py {dev}
flags: preserve-locale preserve-cwd also-after-suspend
category_id: serial
estimated_duration: 3.0
