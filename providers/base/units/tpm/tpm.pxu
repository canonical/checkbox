# Copyright 2015-2016 Canonical Ltd.
# All rights reserved.
#
# Written by:
#   Zygmunt Krynicki <zygmunt.krynicki@canonical.com>

unit: job
id: setup/enable-disabled-tpm
category_id: tpm
_summary: Use BIOS to activate a disabled TPM chip
_purpose:
 This job will reconfigure the TPM chip to be in the Active state.
_steps:
 To enable the TPM chip in the BIOS, write down the following instructions and
 exit the testing application.
 .
 INSTRUCTIONS FOR ENABLING THE TPM CHIP:
 .
  - Commence the test to restart the machine
  - Enter BIOS using machine-specific hot-key (typically F1, F2, or delete)
  - Navigate to TPM menu, the precise location may depend on your BIOS version
    and the make and model of your DUT. On some models it is under the
    following menu: Security / Security Chip.
  - Change the current setting to Active
  - Save BIOS settings
  - Power the machine off (NOTE: a reboot may not be sufficient)
  - Power the machine back on again
  - Let the machine boot
  - Restart the testing application
plugin: user-interact
user: root
command: reboot
estimated_duration: 3m
flags: preserve-locale noreturn
# NOTE: This job will only run if we know we have a TPM chip (according to the
# manifest) but we don't see one in sysfs (because it's disabled).
requires: sysfs_tpm_count.count == "0" and manifest.has_tpm_chip == 'True'
imports: from com.canonical.plainbox import manifest

unit: job
id: setup/enable-inactive-tpm
category_id: tpm
_summary: Use BIOS to activate an inactive TPM chip
_purpose:
 This job will reconfigure the TPM chip to be in the Active state.
_steps:
 To enable the TPM chip in the BIOS, write down the following instructions and
 exit the testing application.
 .
 INSTRUCTIONS FOR ENABLING THE TPM CHIP:
 .
  - Commence the test to restart the machine
  - Enter BIOS using machine-specific hot-key (typically F1, F2, or Delete)
  - Navigate to the TPM menu; the precise location may depend on your BIOS version
    and the make and model of your DUT. On some models, it is under the
    following menu: Security / Security Chip.
  - Change the current setting to Active
  - Save BIOS settings
  - Power the machine off (NOTE: a reboot may not be sufficient)
  - Power the machine back on again
  - Let the machine boot
  - Restart the testing application.
_verification:
 Ensure the TPM chip is active by accessing the BIOS setting post-restart and verifying the status.
plugin: user-interact
user: root
command: reboot
# NOTE: This job will only run if we know we have a TPM chip (according to the
# manifest, again) but sysfs claims it's temporarily deactivated (which is the
# confusing way to say it's inactive)
requires: sysfs_tpm_count.count != "0" and sysfs_tpm.temp_deactivated == "1"
estimated_duration: 3m
flags: preserve-locale noreturn

unit: job
id: action/clear-ownership
category_id: tpm
_summary: Clear ownership of the TPM chip
_purpose:
 This job tries to automatically clear the ownership of an owned TPM chip. It
 uses a well-known owner secret (20 bytes of zeros).
 .
 NOTE: The actual TPM chip will be cleared after the machine reboots. After
 reboot, the TPM will be in the default state: unowned, disabled, and inactive.
 Subsequent jobs will instruct the test operator to enter the BIOS and re-enable
 the chip.
_steps:
 INSTRUCTIONS FOR CLEARING THE TPM CHIP:
 .
  - Commence the test to reboot the machine.
  - Let the machine boot.
  - Restart the testing application.
plugin: user-interact
command:
 tpm.clear --log debug --well-known && reboot
requires: sysfs_tpm.owned == "1" and sysfs_tpm.enabled == "1" and sysfs_tpm.active == "1" and sysfs_tpm.temp_deactivated == "0"
estimated_duration: 5s
flags: preserve-locale preserve-cwd

unit: job
id: action/re-enable-tpm
category_id: tpm
_summary: Re-enable TPM chip in BIOS after clearing ownership
_purpose:
 This job will re-enable the TPM chip in the BIOS after having cleared the ownership.
_steps:
 To enable the TPM chip in the BIOS, write down the following instructions and
 exit the testing application.
 .
 INSTRUCTIONS FOR ENABLING THE TPM CHIP:
 .
  - Commence the test to restart the machine
  - Enter BIOS using machine-specific hot-key (typically F1, F2, or Delete)
  - Navigate to the TPM menu. The precise location may depend on your BIOS version
    and the make and model of your DUT. On some models, it is under the
    following menu: Security / Security Chip.
  - Change the current setting to Active. If it is already in the active state,
    then set it to Disabled and then back to Active. This might be a bug in the BIOS.
  - Save BIOS settings
  - Power the machine off (NOTE: a reboot may not be sufficient)
  - Power the machine back on again
  - Let the machine boot
  - Restart the testing application
plugin: user-interact
user: root
command: reboot
requires: sysfs_tpm_after_clearing_ownership.owned == "0" and sysfs_tpm_after_clearing_ownership.enabled == "0" and sysfs_tpm_after_clearing_ownership.active == "0" and sysfs_tpm_after_clearing_ownership.temp_deactivated == "1"
estimated_duration: 3m
flags: preserve-locale noreturn

unit: job
id: action/take-ownership
category_id: tpm
_summary: Take ownership of the TPM chip
_purpose:
 This job tries to automatically take the ownership of an unowned TPM chip. It
 uses well-known owner and SRK secrets (20 bytes of zeros).
plugin: shell
command: tpm.takeownership --log debug --owner-well-known --srk-well-known
requires: sysfs_tpm.owned == "0" and sysfs_tpm.enabled == "1" and sysfs_tpm.active == "1" and sysfs_tpm.temp_deactivated == "0"
estimated_duration: 5s
flags: preserve-locale preserve-cwd

# A bunch of shell jobs that run various TPM commands

unit: job
id: query/tpm_version
category_id: tpm
_summary: Collect the output of tpm_version
_description:
 _purpose: This job collects the output of "tpm_version" for inspection by a
 Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm.version 2>&1
estimated_duration: 1s
flags: preserve-locale preserve-cwd

unit: job
id: query/tpm_selftest
category_id: tpm
_summary: Collect the output of tpm_selftest
_purpose:
 This job collects the output of "tpm_selftest" for inspection by the
 Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm.selftest 2>&1
estimated_duration: 1s
flags: preserve-locale preserve-cwd

unit: job
id: query/tpm_setactive-status
category_id: tpm
_summary: Collect the output of tpm_setactive --status --well-known
_purpose:
 This simply collects the output of "tpm_setactive --status --well-known" for
 inspection by a Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm.setactive --status --well-known 2>&1
estimated_duration: 1s
flags: preserve-locale preserve-cwd

unit: job
id: query/tpm_nvinfo
category_id: tpm
_summary: Collect the output of tpm_nvinfo
_purpose:
 This simply collects the output of "tpm_nvinfo" for inspection by a
 Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm.nvinfo
estimated_duration: 1s
flags: preserve-locale preserve-cwd

unit: job
id: query/tpm_restrictpubek-status
category_id: tpm
_summary: Collect the output of tpm_restrictpubek --status --well-known
_purpose:
 This simply collects the output of "tpm_restrictpubek --status --well-known"
 for inspection by a Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm.restrictpubek --status --well-known
estimated_duration: 1s
flags: preserve-locale preserve-cwd

unit: job
id: query/tpm_restrictsrk-status
category_id: tpm
_summary: Collect the output of tpm_restrictsrk --status --well-known
_purpose:
 This simply collects the output of "tpm_restrictsrk --status --well-known"
 for inspection by a Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm_restrictsrk --status --well-known
estimated_duration: 1s
flags: preserve-locale preserve-cwd

unit: job
id: query/tpm_setclearable-status
category_id: tpm
_summary: Collect the output of tpm_setclearable --status --well-known
_purpose:
 This simply collects the output of "tpm_setclearable --status --well-known"
 for inspection by a Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm.setclearable --status --well-known
estimated_duration: 1s
flags: preserve-locale preserve-cwd

unit: job
id: query/tpm_setenable-status
category_id: tpm
_summary: Collect the output of tpm_setenable --status --well-known
_purpose:
 This simply collects the output of "tpm_setenable --status --well-known"
 for inspection by a Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm.setenable --status --well-known
estimated_duration: 1s
flags: preserve-locale preserve-cwd

unit: job
id: query/tpm_setownable-status
category_id: tpm
_summary: Collect the output of tpm_setownable --status --well-known for inspection.
_purpose:
 This simply collects the output of "tpm_setownable --status --well-known" for inspection by a Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm.setownable --status --well-known
estimated_duration: 1s
flags: preserve-locale preserve-cwd

unit: job
id: query/tpm_setpresence -status
category_id: tpm
_summary: Collect the output of tpm_setpresence --status --well-known
_purpose:
 This simply collects the output of "tpm_setpresence --status --well-known"
 for inspection by a Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm.setpresence --status --well-known
estimated_duration: 1s
flags: preserve-locale preserve-cwd

unit: job
id: query/tpm_getpubek
category_id: tpm
_summary: Collect the output of tpm_getpubek --well-known
_purpose:
 This simply collects the output of "tpm_getpubek --well-known"
 for inspection by a Certification engineer.
plugin: shell
requires: snap.name == 'tpm'
command: tpm.getpubek --well-known
estimated_duration: 1s
flags: preserve-locale preserve-cwd
