plugin: shell
category_id: com.canonical.plainbox::usb
id: usb/detect
flags: also-after-suspend
requires:
 cpuinfo.platform != 's390x'
estimated_duration: 1.0
command:
 set -o pipefail
 if [[ -v SNAP ]]; then
     checkbox-support-lsusb -f "$CHECKBOX_RUNTIME"/var/lib/usbutils/usb.ids 2>/dev/null | sed 's/.*\(ID .*\)/\1/' | head -n 4 || echo "No USB devices were detected" >&2
 else
     lsusb 2>/dev/null | sort || echo "No USB devices were detected" >&2
 fi
_summary: Display USB devices attached to SUT
_purpose: Detects and shows USB devices attached to this system.

plugin: user-interact-verify
category_id: com.canonical.plainbox::usb
id: usb/disk_detect
depends: usb/detect
flags: also-after-suspend
requires:
 package.name == 'udisks2' or snap.name == 'udisks2'
estimated_duration: 1.0
command: removable_storage_test.py -l usb
_purpose:
 This test will check that your system detects USB storage devices.
_steps:
 1. Plug in one or more USB keys or hard drives.
 2. Click on "Test".
_verification:
 Were the drives detected?
_summary: Verifies the detection of USB storage devices by the system.

plugin: user-interact-verify
category_id: com.canonical.plainbox::usb
id: usb/HID
flags: also-after-suspend
depends: usb/detect
estimated_duration: 1.0
command: keyboard_test.py
_description:
_purpose:
    This test will check that you can use a USB HID device
_steps:
    1. Enable either a USB mouse or keyboard
    2. For mice, perform actions such as moving the pointer, right and left button clicks and double clicks
    3. For keyboards, commence the test to launch a small tool. Type some text and close the tool.
_verification:
    Did the device work as expected?
_summary: Verify USB HID devices functionality by performing specified actions.

id: usb/storage-manual
flags: also-after-suspend fail-on-resource
_summary: Test USB 2.0 storage device insertion + read/write + removal.
_purpose:
    Check system can detect insertion of a USB 2.0 storage device.
    Then it performs a read and write test on the USB 2.0. Finally, it
    checks that the system correctly detects the removal of the USB 2.0.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Commence the test and then insert an USB 2.0 into the reader.
    (Note: this test will time-out after 30 seconds.)
    2. Do not remove the device after this test.
    3. Wait for the read/write operations to complete.
    4. Press Enter to start the removal test.
    5. Remove the USB 2.0 from the reader.
    (Note: this test will time-out after 30 seconds.)
_verification:
 The verification of this test is automated.
 Do not change the automatically selected result.
plugin: user-interact
user: root
command:
 checkbox-support-run_watcher storage usb2
category_id: com.canonical.plainbox::usb
estimated_duration: 120

id: usb3/storage-manual
flags: also-after-suspend
requires:
 usb.usb3 == 'supported'
_summary: Test USB 3.0 storage device insertion + read/write + removal.
_purpose:
    Check system can detect insertion of a USB 3.0 storage device.
    Then it performs a read and write test on the USB 3.0. Finally, it
    checks that the system correctly detects the removal of the USB 3.0.
    NOTE: Make sure the USB storage device has a partition before starting
    the test.
_steps:
    1. Commence the test and then insert an USB 3.0 into the reader.
    (Note: this test will time-out after 30 seconds.)
    2. Do not remove the device after this test.
    3. Wait for the read/write operations to complete.
    4. Press Enter to start the removal test.
    5. Remove the USB 3.0 from the reader.
    (Note: this test will time-out after 30 seconds.)
_verification:
 The verification of this test is automated.
 Do not change the automatically selected result.
plugin: user-interact
user: root
command:
 checkbox-support-run_watcher storage usb3
category_id: com.canonical.plainbox::usb
estimated_duration: 120

plugin: user-interact-verify
category_id: com.canonical.plainbox::usb
id: usb/storage-transfer
user: root
estimated_duration: 45.0
command: removable_storage_test.py -s 268400000 usb
_description:
_purpose:
    This test will check your USB connection.
_steps:
    1. Plug a USB HDD or thumbdrive into the computer.
    2. An icon should appear on the Launcher.
    3. Click "Test" to begin the test.
_verification:
    The verification of this test is automated. Do not change the
    automatically selected result.
_summary: Check USB connection and automatic verification process with plugged USB HDD or thumbdrive.

plugin: user-interact-verify
category_id: com.canonical.plainbox::usb
id: usb3/storage-transfer
requires:
 usb.usb3 == 'supported'
user: root
estimated_duration: 45.0
command: removable_storage_test.py -s 268400000 -m 500000000 usb
_description:
_purpose:
 This test will check your USB 3.0 connection.
_steps:
 1. Plug a USB 3.0 HDD or thumbdrive into a USB 3.0 port in the computer.
 2. An icon should appear on the Launcher.
 3. Click "Test" to begin the test.
_verification:
 The verification of this test is automated. Do not change the
 automatically selected result.
_summary: Check the USB 3.0 connection and data transfer capability.



plugin: shell
category_id: com.canonical.plainbox::usb
id: usb/storage-preinserted
user: root
estimated_duration: 45.0
command: removable_storage_test.py -l usb && timeout 300 removable_storage_test.py -s 268400000 usb
flags: also-after-suspend preserve-cwd
imports: from com.canonical.plainbox import manifest
requires:
 cpuinfo.platform != 's390x'
 package.name == 'udisks2' or snap.name == 'udisks2'
 manifest.has_usb_storage == 'True'
_summary:
 Test USB 2.0 or 1.1 ports
_description:
 Tests USB 2.0 or 1.1 ports on a system by doing write/read/compare tests on
 randomly created data.  It requires that a USB stick is plugged into an
 available USB port before running the certification suite.
_siblings:
    [{ "id": "usb/storage-server",
       "requires": "cpuinfo.platform != 's390x'\npackage.name == 'udisks2' or snap.name == 'udisks2'" }]

plugin: shell
category_id: com.canonical.plainbox::usb
id: usb3/storage-preinserted
user: root
flags: also-after-suspend
imports: from com.canonical.plainbox import manifest
requires:
 cpuinfo.platform != 's390x'
 usb.usb3 == 'supported'
 package.name == 'udisks2' or snap.name == 'udisks2'
 manifest.has_usb_storage == 'True'
estimated_duration: 45.0
command: removable_storage_test.py -l usb && timeout 300 removable_storage_test.py -s 268400000 -m 500000000 usb --driver xhci_hcd
_summary: 
 Test USB 3.0 or 3.1 ports
_purpose:
 Tests USB 3.0 ports on a system by doing write/read/compare tests on
 randomly created data. It requires that a USB stick is plugged into an
 available USB port before running the certification suite. Additionally, it
 will only work with USB sticks and ports rated for USB 3.0 speeds or faster.
_siblings:
    [{ "id": "usb3/storage-server",
       "requires": "cpuinfo.platform != 's390x'\nusb.usb3 == 'supported'\npackage.name == 'udisks2' or snap.name == 'udisks2'" }]

plugin: manual
category_id: com.canonical.plainbox::usb
id: usb/panels
_purpose:
    This test will check your USB connection.
_steps:
    1. Connect a USB storage device to an external USB slot on this computer.
    2. An icon should appear on the Launcher.
    3. Confirm that the icon appears.
    4. Eject the device.
    5. Repeat with each external USB slot.
_verification:
    Do all USB slots work with the device?
_summary: Test USB connectivity by connecting a USB storage device to all external USB slots.

plugin: shell
category_id: com.canonical.plainbox::usb
id: usb/performance
flags: also-after-suspend
user: root
estimated_duration: 45.00
command: removable_storage_test.py -s 268400000 -p 15 usb
_purpose:
 This test will check that your USB 2.0 port transfers data at a
 minimum expected speed.
_steps:
 1. Plug a USB 2.0 HDD or thumbdrive into the computer.
 2. Start the test.
_summary: Verify USB 2.0 port data transfer speeds meet minimum expectations.

id: usb/storage-detect
category_id: com.canonical.plainbox::usb
plugin: shell
_summary: Detect storage partitions on a device on the USB bus
command:
  udev_resource.py -f PARTITION | grep "bus: usb"
estimated_duration: 1.0
flags: also-after-suspend
imports: from com.canonical.plainbox import manifest
requires:
  manifest.has_usb_storage == 'True'

unit: template
template-resource: removable_partition
template-filter: "usb" in removable_partition.bus
template-unit: job
plugin: shell
category_id: com.canonical.plainbox::usb
id: usb/storage-preinserted-{symlink_uuid}
template-id: usb/storage-preinserted-symlink_uuid
user: root
estimated_duration: 45.0
flags: also-after-suspend reset-locale
command: USB_RWTEST_PARTITIONS={symlink_uuid} checkbox-support-usb_read_write
_summary:
 Test USB storage on 2.0 or 1.1 ports detected by udev ({symlink_uuid})
_purpose:
 Tests USB 2.0 or 1.1 ports on a system by doing write/read/compare tests on
 randomly created data. It requires that a USB stick is plugged into an
 available USB port before running the certification suite.
depends: usb/storage-detect

id: usb/hid
_summary: USB keyboard works
_purpose:
 Check USB input device works
_steps:
 1. Connect USB keyboard
 2. Input something with USB keyboard
_verification:
 What was just input is displayed correctly
plugin: manual
flags: also-after-suspend
category_id: com.canonical.plainbox::usb
estimated_duration: 60
