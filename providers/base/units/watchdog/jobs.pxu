id: watchdog/detect
category_id: com.canonical.plainbox::power-management
_summary: Detect presence of a Hardware Watchdog
_description:
    Detect the watchdog is under the /sys/class/watchdog/ path and no other type of watchdog
user: root
flags: simple
imports: from com.canonical.plainbox import manifest
requires: manifest.has_hardware_watchdog == 'True'
environ: WATCHDOG_TYPE WATCHDOG_IDENTITY
command:
    watchdog_test.py detect --module "$WATCHDOG_TYPE" --identity "$WATCHDOG_IDENTITY"

id: watchdog/trigger-system-reset-auto
user: root
plugin: shell
category_id: com.canonical.plainbox::power-management
_summary: Test that the watchdog module can trigger a system reset
flags: noreturn autorestart
estimated_duration: 60
depends:
    watchdog/check-service
    watchdog/detect
environ: WATCHDOG_TYPE WATCHDOG_IDENTITY WATCHDOG_TIMEOUT
command:
    watchdog_test.py trigger-reset --module "$WATCHDOG_TYPE" --identity "$WATCHDOG_IDENTITY" --log-dir "$PLAINBOX_SESSION_SHARE" --timeout "${WATCHDOG_TIMEOUT:-30}"

id: watchdog/post-trigger-system-reset-auto
after: watchdog/trigger-system-reset-auto
category_id: com.canonical.plainbox::power-management
_summary: Post watchdog reset service check
_purpose: Check there are no failed services after the watchdog triggered
unit: job
user: root
plugin: shell
estimated_duration: 1.0
imports: from com.canonical.plainbox import manifest
requires: manifest.has_hardware_watchdog == 'True'
depends:
    watchdog/trigger-system-reset-auto
environ: COLD_REBOOT_DELAY
command: watchdog_test.py post-check --log-dir "$PLAINBOX_SESSION_SHARE" && failed_service_check.sh

id: watchdog/check-timeout
category_id: com.canonical.plainbox::power-management
_summary: Check the timeout of Hardware Watchdog
_description:
    Check the value of RuntimeWatchdogUSec that shouldn't be 0
flags: simple
imports: from com.canonical.plainbox import manifest
requires:
    manifest.has_hardware_watchdog == 'True'
command: watchdog_config_test.py check-timeout

id: watchdog/check-service
category_id: com.canonical.plainbox::power-management
_summary: Check the watchdog.service is enabled or not
_description:
    Check the state of the watchdog.service. It must be disabled/missing
    on both classic and core images since 20.04. Else it must be enabled.
flags: simple
imports: from com.canonical.plainbox import manifest
requires:
    manifest.has_hardware_watchdog == 'True'
command: watchdog_config_test.py check-service
