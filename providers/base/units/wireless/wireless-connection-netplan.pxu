unit: template
template-resource: device
template-filter: device.category == 'WIRELESS' and device.interface != 'UNKNOWN'
template-engine: jinja2
template-unit: job
id: wireless/wireless_connection_open_ax_np_{{ interface }}
_summary:
 Connect to unencrypted 802.11ax Wi-Fi network on {{ interface }} - netplan
_purpose:
 Check system can connect to insecure 802.11ax AP using netplan
plugin: shell
command:
    net_driver_info.py "$NET_DRIVER_INFO"
    wifi_client_test_netplan.py -i {{ interface }} -s "$OPEN_AX_SSID" -d
user: root
environ: LD_LIBRARY_PATH OPEN_AX_SSID NET_DRIVER_INFO
category_id: com.canonical.plainbox::wireless
estimated_duration: 15
flags: preserve-locale also-after-suspend
requires:
 wireless_sta_protocol.{{ interface }}_ax == 'supported'
 net_if_management.device == '{{ interface }}' and net_if_management.managed_by == 'networkd'


unit: template
template-resource: device
template-filter: device.category == 'WIRELESS' and device.interface != 'UNKNOWN'
template-engine: jinja2
template-unit: job
id: wireless/wireless_connection_open_ac_np_{{ interface }}
_summary:
 Connect to unencrypted 802.11ac Wi-Fi network on {{ interface }} - netplan
_purpose:
 Check system can connect to insecure 802.11ac AP using netplan
plugin: shell
command:
    net_driver_info.py "$NET_DRIVER_INFO"
    wifi_client_test_netplan.py -i {{ interface }} -s "$OPEN_AC_SSID" -d
user: root
environ: LD_LIBRARY_PATH OPEN_AC_SSID NET_DRIVER_INFO
category_id: com.canonical.plainbox::wireless
estimated_duration: 15
flags: preserve-locale also-after-suspend
requires:
 wireless_sta_protocol.{{ interface }}_ac == 'supported'
 net_if_management.device == '{{ interface }}' and net_if_management.managed_by == 'networkd'



unit: template
template-resource: device
template-filter: device.category == 'WIRELESS' and device.interface != 'UNKNOWN'
template-engine: jinja2
template-unit: job
id: wireless/wireless_connection_open_bg_np_{{ interface }}
_summary:
 Connect to unencrypted 802.11b/g Wi-Fi network on {{ interface }} - netplan
_purpose:
 Check system can connect to insecure 802.11b/g AP using netplan
plugin: shell
command:
    net_driver_info.py "$NET_DRIVER_INFO"
    wifi_client_test_netplan.py -i {{ interface }} -s "$OPEN_BG_SSID" -d
user: root
environ: LD_LIBRARY_PATH OPEN_BG_SSID NET_DRIVER_INFO
category_id: com.canonical.plainbox::wireless
estimated_duration: 15
flags: preserve-locale also-after-suspend
requires:
 net_if_management.device == '{{ interface }}' and net_if_management.managed_by == 'networkd'


unit: template
template-resource: device
template-filter: device.category == 'WIRELESS' and device.interface != 'UNKNOWN'
template-engine: jinja2
template-unit: job
id: wireless/wireless_connection_open_n_np_{{ interface }}
_summary:
 Connect to unencrypted 802.11n Wi-Fi network on {{ interface }} - netplan
_purpose:
 Check system can connect to insecure 802.11n AP using netplan
plugin: shell
command:
    net_driver_info.py "$NET_DRIVER_INFO"
    wifi_client_test_netplan.py -i {{ interface }} -s "$OPEN_N_SSID" -d
user: root
environ: LD_LIBRARY_PATH OPEN_N_SSID NET_DRIVER_INFO
category_id: com.canonical.plainbox::wireless
estimated_duration: 15
flags: preserve-locale also-after-suspend
requires:
 net_if_management.device == '{{ interface }}' and net_if_management.managed_by == 'networkd'


unit: template
template-resource: device
template-filter: device.category == 'WIRELESS' and device.interface != 'UNKNOWN'
template-engine: jinja2
template-unit: job
id: wireless/wireless_connection_wpa_ax_np_{{ interface }}
_summary:
 Connect to WPA-encrypted 802.11ax Wi-Fi network on {{ interface }} - netplan
_purpose:
 Check system can connect to 802.11ax AP with wpa security using netplan
plugin: shell
command:
    net_driver_info.py "$NET_DRIVER_INFO"
    wifi_client_test_netplan.py -i {{ interface }} -s "$WPA_AX_SSID" -k "$WPA_AX_PSK" -d
user: root
environ: LD_LIBRARY_PATH WPA_AX_SSID WPA_AX_PSK NET_DRIVER_INFO
category_id: com.canonical.plainbox::wireless
estimated_duration: 15
flags: preserve-locale also-after-suspend
requires:
 wireless_sta_protocol.{{ interface }}_ax == 'supported'
 net_if_management.device == '{{ interface }}' and net_if_management.managed_by == 'networkd'


unit: template
template-resource: device
template-filter: device.category == 'WIRELESS' and device.interface != 'UNKNOWN'
template-engine: jinja2
template-unit: job
id: wireless/wireless_connection_wpa3_ax_np_{{ interface }}
_summary:
 Connect to WPA3-encrypted 802.11ax Wi-Fi network on {{ interface }} - netplan
_purpose:
 Check system can connect to 802.11ax AP with wpa3 security using netplan
plugin: shell
command:
    net_driver_info.py "$NET_DRIVER_INFO"
    wifi_client_test_netplan.py -i {{ interface }} -s "$WPA3_AX_SSID" -k "$WPA3_AX_PSK" -d
user: root
environ: LD_LIBRARY_PATH WPA3_AX_SSID WPA3_AX_PSK NET_DRIVER_INFO
category_id: com.canonical.plainbox::wireless
estimated_duration: 15
flags: preserve-locale also-after-suspend
requires:
 wireless_sta_protocol.{{ interface }}_ax == 'supported'
 net_if_management.device == '{{ interface }}' and net_if_management.managed_by == 'networkd'


unit: template
template-resource: device
template-filter: device.category == 'WIRELESS' and device.interface != 'UNKNOWN'
template-engine: jinja2
template-unit: job
id: wireless/wireless_connection_wpa_ac_np_{{ interface }}
_summary:
 Connect to WPA-encrypted 802.11ac Wi-Fi network on {{ interface }} - netplan
_purpose:
 Check system can connect to 802.11ac AP with wpa security using netplan
plugin: shell
command:
    net_driver_info.py "$NET_DRIVER_INFO"
    wifi_client_test_netplan.py -i {{ interface }} -s "$WPA_AC_SSID" -k "$WPA_AC_PSK" -d
user: root
environ: LD_LIBRARY_PATH WPA_AC_SSID WPA_AC_PSK NET_DRIVER_INFO
category_id: com.canonical.plainbox::wireless
estimated_duration: 15
flags: preserve-locale also-after-suspend
requires:
 wireless_sta_protocol.{{ interface }}_ac == 'supported'
 net_if_management.device == '{{ interface }}' and net_if_management.managed_by == 'networkd'


unit: template
template-resource: device
template-filter: device.category == 'WIRELESS' and device.interface != 'UNKNOWN'
template-engine: jinja2
template-unit: job
id: wireless/wireless_connection_wpa_bg_np_{{ interface }}
_summary:
 Connect to WPA-encrypted 802.11b/g Wi-Fi network on {{ interface }} - netplan
_purpose:
 Check system can connect to 802.11b/g AP with wpa security using netplan
plugin: shell
command:
    net_driver_info.py "$NET_DRIVER_INFO"
    wifi_client_test_netplan.py -i {{ interface }} -s "$WPA_BG_SSID" -k "$WPA_BG_PSK" -d
user: root
environ: LD_LIBRARY_PATH WPA_BG_SSID WPA_BG_PSK NET_DRIVER_INFO
category_id: com.canonical.plainbox::wireless
estimated_duration: 15
flags: preserve-locale also-after-suspend
requires:
 net_if_management.device == '{{ interface }}' and net_if_management.managed_by == 'networkd'


unit: template
template-resource: device
template-filter: device.category == 'WIRELESS' and device.interface != 'UNKNOWN'
template-engine: jinja2
template-unit: job
id: wireless/wireless_connection_wpa_n_np_{{ interface }}
_summary:
 Connect to WPA-encrypted 802.11n Wi-Fi network on {{ interface }} - netplan
_purpose:
 Check system can connect to 802.11n AP with wpa security using netplan
plugin: shell
command:
    net_driver_info.py "$NET_DRIVER_INFO"
    wifi_client_test_netplan.py -i {{ interface }} -s "$WPA_N_SSID" -k "$WPA_N_PSK" -d
user: root
environ: LD_LIBRARY_PATH WPA_N_SSID WPA_N_PSK NET_DRIVER_INFO
category_id: com.canonical.plainbox::wireless
estimated_duration: 15
flags: preserve-locale also-after-suspend
requires:
 net_if_management.device == '{{ interface }}' and net_if_management.managed_by == 'networkd'
