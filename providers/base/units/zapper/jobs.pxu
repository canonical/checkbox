id: monitor/zapper-edid
requires: zapper_capabilities.capability == 'hdmi-capture' and zapper_capabilities.edid_cycling == 'True'
category_id: com.canonical.plainbox::monitor
plugin: shell
estimated_duration: 60
_summary: Check if the system automatically changes the resolution based on EDID
environ: ZAPPER_HOST
command: edid_cycle.py "$ZAPPER_HOST"

unit: template
template-resource: zapper_capabilities
template-filter: zapper_capabilities.capability == 'USB hotplug' and zapper_capabilities.usb_version == '2'
category_id: com.canonical.plainbox::usb
id: usb/zapper-usb-insert-{{ port_alias }}
template-engine: jinja2
_summary: Zapper-driven USB insertion test on port {{ port_alias }}
requires: usb.usb2 == 'supported'
plugin: shell
user: root
environ: ZAPPER_HOST
command:
 {%- if __on_ubuntucore__ %}
     checkbox-support-run_watcher --zapper-usb-address={{ port_alias }} insertion usb2
 {%- else %}
     removable_storage_watcher.py --unmounted --zapper-usb-address={{ port_alias }} insert usb
 {% endif -%}
estimated_duration: 20

unit: template
template-resource: zapper_capabilities
template-filter: zapper_capabilities.capability == 'USB hotplug' and zapper_capabilities.usb_version == '3'
category_id: com.canonical.plainbox::usb
id: usb3/zapper-usb-insert-{{ port_alias }}
template-engine: jinja2
_summary: Zapper-driven USB 3.0 insertion test on port {{ port_alias }}
requires: usb.usb3 == 'supported'
plugin: shell
user: root
environ: ZAPPER_HOST
command:
 {%- if __on_ubuntucore__ %}
     checkbox-support-run_watcher --zapper-usb-address={{ port_alias }} insertion usb3
 {%- else %}
     removable_storage_watcher.py --unmounted -m 500000000 --zapper-usb-address={{ port_alias }} insert usb
 {% endif -%}
estimated_duration: 20

unit: template
template-resource: zapper_capabilities
template-filter: zapper_capabilities.capability == 'USB hotplug' and zapper_capabilities.usb_version == '2'
category_id: com.canonical.plainbox::usb
id: usb/zapper-usb-remove-{{ port_alias }}
template-engine: jinja2
_summary: Zapper-driven USB removal test on port {{ port_alias }}
requires: usb.usb2 == 'supported'
plugin: shell
user: root
environ: ZAPPER_HOST
command:
 {%- if __on_ubuntucore__ %}
     checkbox-support-run_watcher --zapper-usb-address={{ port_alias }} removal usb2
 {%- else %}
     removable_storage_watcher.py --unmounted --zapper-usb-address={{ port_alias }} remove usb
 {% endif -%}
estimated_duration: 20

unit: template
template-resource: zapper_capabilities
template-filter: zapper_capabilities.capability == 'USB hotplug' and zapper_capabilities.usb_version == '3'
category_id: com.canonical.plainbox::usb
id: usb3/zapper-usb-remove-{{ port_alias }}
template-engine: jinja2
_summary: Zapper-driven USB 3.0 removal test on port {{ port_alias }}
requires: usb.usb3 == 'supported'
plugin: shell
user: root
environ: ZAPPER_HOST
command:
 {%- if __on_ubuntucore__ %}
     checkbox-support-run_watcher --zapper-usb-address={{ port_alias }} removal usb3
 {%- else %}
     removable_storage_watcher.py --unmounted -m 500000000 --zapper-usb-address={{ port_alias }} remove usb
 {% endif -%}
estimated_duration: 20

id: bluetooth/zapper-a2dp
requires: zapper_capabilities.capability == 'bluetooth' and 'a2dp' in zapper_capabilities.profiles
category_id: com.canonical.plainbox::bluetooth
plugin: shell
estimated_duration: 60
_summary: Check if the system can connect to a Bluetooth speaker using A2DP profile
environ: ZAPPER_HOST
command: bt_a2dp.py "$ZAPPER_HOST"
depends: bluetooth/detect-output

id: input/zapper-keyboard
requires: zapper_capabilities.capability == 'hid'
category_id: com.canonical.plainbox::input
plugin: shell
user: root
estimated_duration: 10
_summary: Check if the system recognizes keyboard events from Zapper
environ: ZAPPER_HOST
command: zapper_keyboard_test.py "$ZAPPER_HOST"
