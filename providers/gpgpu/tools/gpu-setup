#!/bin/bash

echo "Configuring system for GPU Testing"
echo "**********************************"
echo "*"

# For now we need internet access for this to work.  Future versions will
# remove this necessity
echo "*  Testing network connectivity"
[[ ! `ping -c 1 www.ubuntu.com` ]] \
    && echo "ERROR: This script requires internet access to function correctly" \
    && exit 1
echo "*"
echo "**********************************"
echo "*"
echo "*  Adding nVidia package repository"
## Leave the following bits for now, it's useful code to template if we sort
## out local hosting in the future.
#file_pattern="cuda-repo-ubuntu$(lsb_release -r | cut -f 2 | sed -es/\\.//)*.deb"
#gw_ip=`ip route | awk '/default/ { print $3 }'`

# attempt a download from our MAAS server (presume the SUT's gw IP is MAAS)
#wget -r -l1 -nd --no-parent -A "$file_pattern" http://$gw_ip/nvidia/
#nvidia_pkg=`find / -name $file_pattern`

#if [ -z "$nvidia_pkg" ]; then
#    echo "*  No local package found, installing remote installer"
#    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
#    dpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
#    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
#else
#    echo "*  Local package detected at $nvidia_pkg... installing"
#    key_cmd=`dpkg -i $nvidia_pkg |awk '/To install the key, run this command/{getline; print}'`
#    $key_cmd
#fi    

## For now, require internet access and installing directly from nVidia
# SAUCE: https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1804&target_type=debnetwork

OSRELEASE=ubuntu`lsb_release -r | cut -f2 |sed -e 's/\.//'`
ARCH=`uname -m`
case $ARCH in
    arm)
        ;&
    aarch64_be)
        ;&
    aarch64)
        ARCH="arm64"
        ;;
    x86_64)
        ;;
    *)
        echo "ERROR: Unsupported architecture $ARCH"
        exit 0
        ;;
esac
REPO_URL="https://developer.download.nvidia.com/compute/cuda/repos/$OSRELEASE/$ARCH"

# Import and verify cuda gpg key
wget -O cuda-archive-keyring.gpg "$REPO_URL/3bf863cc.pub"
if [[ $? -eq 8 ]] ; then
    echo "ERROR: wget failed. Check networking or $OSRELEASE/$ARCH not supported?"
    exit 0
fi
gpg --no-default-keyring --keyring ./temp-keyring.gpg \
    --import cuda-archive-keyring.gpg
gpg --no-default-keyring --keyring ./temp-keyring.gpg \
    --fingerprint "EB693B3035CD5710E231E123A4B469963BF863CC"
if [[ $? -ne 0 ]] ; then
    echo "ERROR: GPG key import failed. Invalid gpg key?"
    exit 1
fi
sudo gpg --yes --no-default-keyring --keyring ./temp-keyring.gpg --export \
    --output /usr/share/keyrings/cuda-archive-keyring.gpg
rm ./temp-keyring.gpg
rm ./temp-keyring.gpg~
rm ./cuda-archive-keyring.gpg

PINFILE="cuda-$OSRELEASE.pin"
sudo wget -O /etc/apt/preferences.d/cuda-repository-pin-600 "$REPO_URL/$PINFILE"

sudo tee /etc/apt/sources.list.d/cuda-$OSRELEASE-$ARCH.list << 'EOF'
deb [signed-by=/usr/share/keyrings/cuda-archive-keyring.gpg] http://developer.download.nvidia.com/compute/cuda/repos/$OSRELEASE/$ARCH/ /
EOF

# Install necessary files
#apt update
echo "*  Installing necessary pacakges"
sudo apt install -y build-essential git
## need to break this out to fix issue where cuda installs gdm3
sudo apt install -y --no-install-recommends cuda-toolkit

#fix the path to get nvcc from the cuda package
CUDA_PATH=$(find /usr/local -maxdepth 1 -type d -iname "cuda*")/bin
export PATH=$PATH:$CUDA_PATH

# Get the build and output directories, make them if they don't exist yet
SCRIPT_DIR="$(dirname -- "$(readlink -f -- "$0")")"
PROVIDER_PATH="$(dirname -- "$SCRIPT_DIR")"
BUILD_DIR="$PROVIDER_PATH/build"
BIN_DIR="$PROVIDER_PATH/bin"
DATA_DIR="$PROVIDER_PATH/data"
mkdir -p "$BUILD_DIR" "$BIN_DIR" "$DATA_DIR"

# clone cuda-samples repo
echo "*  Cloning cuda-samples repo"
CUDA_SAMPLES_DIR="$BUILD_DIR/cuda-samples"
git clone https://github.com/nvidia/cuda-samples.git "$CUDA_SAMPLES_DIR"
echo "*  Building cuda-samples tests"
make -C "$CUDA_SAMPLES_DIR/Samples/0_Introduction/matrixMulDrv"
cp "$CUDA_SAMPLES_DIR/Samples/0_Introduction/matrixMulDrv/matrixMulDrv" "$BIN_DIR/"
cp -r "$CUDA_SAMPLES_DIR/Samples/0_Introduction/matrixMulDrv/data" "$DATA_DIR/matrixMulDrv"
make -C "$CUDA_SAMPLES_DIR/Samples/0_Introduction/vectorAddDrv"
cp "$CUDA_SAMPLES_DIR/Samples/0_Introduction/vectorAddDrv/vectorAddDrv" "$BIN_DIR/"
cp -r "$CUDA_SAMPLES_DIR/Samples/0_Introduction/vectorAddDrv/data" "$DATA_DIR/vectorAddDrv"
make -C "$CUDA_SAMPLES_DIR/Samples/1_Utilities/deviceQueryDrv"
cp "$CUDA_SAMPLES_DIR/Samples/1_Utilities/deviceQueryDrv/deviceQueryDrv" "$BIN_DIR/"
make -C "$CUDA_SAMPLES_DIR/Samples/0_Introduction/simpleTextureDrv"
cp "$CUDA_SAMPLES_DIR/Samples/0_Introduction/simpleTextureDrv/simpleTextureDrv" "$BIN_DIR/"
cp -r "$CUDA_SAMPLES_DIR/Samples/0_Introduction/simpleTextureDrv/data" "$DATA_DIR/simpleTextureDrv"
echo "*  Building cuda-samples tests completed..."

# get the gpu-burn repo and build it
echo "*  Cloning gpu-burn repo"
GPU_BURN_DIR="$BUILD_DIR/gpu-burn"
git clone https://github.com/wilicc/gpu-burn.git "$GPU_BURN_DIR"
echo "*  Building gpu-burn"
make -C "$GPU_BURN_DIR"
cp "$GPU_BURN_DIR/gpu_burn" "$BIN_DIR/"
cp "$GPU_BURN_DIR/compare.ptx" "$DATA_DIR/"
echo "*  Build completed..."
echo "*"
echo "*  Completed installation. Please reboot the machine now"
echo "*  to load the nVidia proprietary drivers"
